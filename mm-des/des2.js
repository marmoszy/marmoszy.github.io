var pycode="IyBtbS1kZXMgLSBkaXNjcmV0ZSBldmVudCBzaW11bGF0b3IKIyAtIGJhc2UgZXZlbnRzOiBHZW5lcmF0b3IsU2VydmljZSxTaW5rLENvbmRpdGlvbmFsRXZlbnQKIyAtIGJwbW4gZXZlbnRzOiBTdGFydCxUYXNrLEVuZCxUaW1lcixYb3JHYXRlLEFuZEdhdGUsQ29uZGl0aW9uLFRlcm1pbmF0ZQojIE1NIDMxLjEuMjAyNCwgMTMuOS4yMDI1IChhZG9wdGVkIGZvciBweW9kaWRlIGluIGpzKQoKIyAtLS0tIHNpbXVsYXRpb24gb24gYW4gYWJzdHJhY3QgZXZlbnQgLS0tLQpjbGFzcyBFdmVudCgpOgogICAgICBjbnQgPSAwICAgICAgICAgICAgICAgICAgICAgICAgICMgdXNlZCBmb3IgZXZlbnQgaWRlbnRpZmllcgogICAgICBkZWYgX19pbml0X18oc2VsZiwgdGltZSwgbmFtZT1Ob25lKToKICAgICAgICAgICAgc2VsZi50aW1lID0gdGltZTsKICAgICAgICAgICAgRXZlbnQuY250ICs9IDEKICAgICAgICAgICAgc2VsZi5pZCA9IEV2ZW50LmNudAogICAgICAgICAgICBzZWxmLm5hbWUgPSAoKG5hbWU9PU5vbmUpIGFuZCAiRXZlbnQiIG9yIG5hbWUpICsgIl8iK3N0cihzZWxmLmlkKQogICAgICBkZWYgZXhlYyhzZWxmLCBzaW0pOiBwYXNzICAgICAgIyBhYnN0cmFjdCAKICAgICAgZGVmIF9fc3RyX18oc2VsZik6CiAgICAgICAgICAgIHJldHVybiBzZWxmLm5hbWUrICIgIisgc3RyKHNlbGYuaWQpICsiICIrc3RyKHNlbGYudGltZSkKY2xhc3MgU2ltdWxhdG9yKCk6CiAgICAgIGRlZiBfX2luaXRfXyhzZWxmKToKICAgICAgICAgICAgc2VsZi50aW1lID0gMAogICAgICAgICAgICBzZWxmLmV2ZW50cyA9IFtdCiAgICAgICAgICAgIHNlbGYuY29uZGl0aW9ucyA9IFtdCiAgICAgIGRlZiBub3coc2VsZik6CiAgICAgICAgICAgIHJldHVybiBzZWxmLnRpbWUKICAgICAgZGVmIGFkZChzZWxmLGUpOgogICAgICAgICAgICBzZWxmLmV2ZW50cy5hcHBlbmQoZSkKICAgICAgICAgICAgcmV0dXJuKHNlbGYpCiAgICAgIGRlZiBhZGRfY29uZGl0aW9uKHNlbGYsZSk6CiAgICAgICAgICAgIHNlbGYuY29uZGl0aW9ucy5hcHBlbmQoZSkKICAgICAgICAgICAgcmV0dXJuKHNlbGYpCiAgICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgICAgIHdoaWxlIHNlbGYuZXZlbnRzOgogICAgICAgICAgICAgICAgICBlID0gbWluKHNlbGYuZXZlbnRzLCBrZXk9bGFtYmRhIGU6IGUudGltZSkKICAgICAgICAgICAgICAgICAgc2VsZi5ldmVudHMucmVtb3ZlKGUpCiAgICAgICAgICAgICAgICAgIHNlbGYudGltZSA9IGUudGltZSAgICAgICAgICMgdXBkYXRlIHNpbXVsYXRvciB0aW1lCiAgICAgICAgICAgICAgICAgIGUuZXhlYyhzZWxmKQogICAgICAgICAgICAgICAgICBmb3IgYyBpbiBzZWxmLmNvbmRpdGlvbnM6ICAjIHRlc3QgY29uZGl0aW9ucwogICAgICAgICAgICAgICAgICAgICAgICBpZiBjLmV4ZWMoc2VsZik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29uZGl0aW9ucy5yZW1vdmUoYykKIyAtLS0tIHV0aWxzIC0tLS0KaW1wb3J0IG1hdGgscmFuZG9tCmRlZiBfcHJpbnQocyk6ICAgICAgICAgICAgICAgICMgb3duIHByaW50CiAgICAgICNwcmludChzKSAgICAgICAgICAgICAgICMgY29tbWVudCBpZiBubyB2ZXJib3VzIHByaW50aW5nCiAgICAgIHBhc3MKZGVmIEUobWVhbj1bMS4wXSk6ICAgICAgICAgICAgIyBleHBvbmVudGlhbCByYW5kb20gZ2VuZXJhdG9yCiAgICAgICMgLW1lYW5bMF0qbWF0aC5sb2cocmFuZG9tLnJhbmRvbSgpKQogICAgICByZXR1cm4gcmFuZG9tLmV4cG92YXJpYXRlKDEvbWVhblswXSkgCmRlZiBVKG1pbm1heD1bMS4wXSk6ICAgICAgICAgICMgdW5pZm9ybSByYW5kb20gZ2VuZXJhdG9yCiAgICAgIHJldHVybiByYW5kb20udW5pZm9ybShtaW5tYXhbMF0sbGVuKG1pbm1heCk+MSBhbmQgbWlubWF4WzFdIG9yIG1pbm1heFswXSkKZGVmIE4obWVhbnN0ZD1bMy4wXSk6ICAgICAgICAjIGdhdXNzaWFuIHJhbmRvbSBnZW5lcmF0b3IKICAgICAgcmV0dXJuIHJhbmRvbS5ub3JtYWx2YXJpYXRlKG1lYW5zdGRbMF0sbGVuKG1lYW5zdGQpPjEgYW5kIG1lYW5zdGRbMV0gb3IgMS4wKQpkZWYgQihwPTAuNSk6ICAgICAgICAgICAgICAgICMgYmlub21pYWwgKDAsMSkKICAgICAgcmV0dXJuIHJhbmRvbS5yYW5kb20oKTxwCmRlZiBDKHA9WzEsMSwxXSk6ICAgICAgICAgICAgIyBjaG9pY2UgKDAsMSwyLC4uLikKICAgICAgcmV0dXJuIHJhbmRvbS5jaG9pY2VzKGxpc3QocmFuZ2UobGVuKHApKSksd2VpZ2h0cz1wKVswXQpkZWYgVChtaW5tYXg9WzEuMF0pOiAgICAgICAgICAjIHNlbWkgdHJ1bmNhdGVkIGdhdXNzaWFuIHJhbmRvbSBnZW5lcmF0b3IKICAgICAgbWksbWEgPSBtaW5tYXhbMF0sbGVuKG1pbm1heCk+MSBhbmQgbWlubWF4WzFdIG9yIG1pbm1heFswXQogICAgICBtZWFuLHN0ZCA9IChtYSttaSkvMiwobWEtbWkpLzIKICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgeCA9IE4oW21lYW4sc3RkXSkKICAgICAgICAgICAgaWYgbWkgPD0geCA8PSBtYTogYnJlYWsKICAgICAgcmV0dXJuIHgKCiMgLS0tLSBwcmltaXRpdmUgY2xhc3NlcyAtLS0tCmNsYXNzIEN1c3RvbWVyKCk6ICAgICMgYW5vbnltb3VzIGN1c3RvbWVyIHdpdGggYSBhdXRvbWF0aWMgbmFtZQogICAgICBjbnQgPSAwICAgICAgICAjIGNvdW50ZXIgY2xhc3MgdmFyaWFibGUgZm9yIGN1c3RvbWVyIG5hbWUKICAgICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgICAgICBDdXN0b21lci5jbnQgKz0gMQogICAgICAgICAgICBzZWxmLm5hbWUgPSBzdHIoQ3VzdG9tZXIuY250KQogICAgICAgICAgICBzZWxmLmF0dHIgPSB7ImNuYW1lIjpzZWxmLm5hbWV9ICMgQ3VzdG9tZXIgYXR0cmlidXRlcwogICAgICBkZWYgX19zdHJfXyhzZWxmKToKICAgICAgICAgICAgcmV0dXJuIHN0cihzZWxmLm5hbWUpCmNsYXNzIFF1ZXVlKCk6ICAgICAgICMgZmlmbyBvZiBjdXN0b21lcnMKICAgICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgICAgICBzZWxmLm9iamVjdHMgPSBbXQogICAgICBkZWYgcHVzaChzZWxmLG9iaik6CiAgICAgICAgICAgIHNlbGYub2JqZWN0cy5hcHBlbmQob2JqKQogICAgICBkZWYgcG9wKHNlbGYpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5vYmplY3RzLnBvcCgwKQogICAgICBkZWYgX19sZW5fXyhzZWxmKToKICAgICAgICAgICAgcmV0dXJuIGxlbihzZWxmLm9iamVjdHMpCiAgICAgIGRlZiBfX3N0cl9fKHNlbGYpOgogICAgICAgICAgICByZXR1cm4gc3RyKFtzdHIobykgZm9yIG8gaW4gc2VsZi5vYmplY3RzXSkKY2xhc3MgUXVldWVkRXZlbnQoRXZlbnQpOgogICAgICBpbnN0YW5jZXM9W10KICAgICAgZGVmIF9faW5pdF9fKHNlbGYsbmFtZT1Ob25lKToKICAgICAgICAgICAgRXZlbnQuX19pbml0X18oc2VsZiwwLjAsbmFtZSkgICMgcHJlaW5pdCB0aW1lCiAgICAgICAgICAgIHNlbGYucXVldWUgPSBRdWV1ZSgpICAgICAgIyBvd24gcXVldWUKICAgICAgICAgICAgc2VsZi5vdXRwdXQgPSBbXSAgICAgICAgICAjIG5vIGNvbm5lY3RlZCBvYmplY3RzCiAgICAgICAgICAgIHNlbGYuY3VzdG9tZXIgPSBOb25lICAgICAgIyBub25lIGJlaW5nIHNlcnZlZAogICAgICAgICAgICBRdWV1ZWRFdmVudC5pbnN0YW5jZXMuYXBwZW5kKHNlbGYpCiAgICAgIGRlZiBzZXROYW1lKHNlbGYsbmFtZSk6CiAgICAgICAgICAgIHNlbGYubmFtZT1uYW1lKyJfIitzZWxmLm5hbWUuc3BsaXQoIl8iKVsxXSAjLnJlcGxhY2UoIkV2ZW50IixuYW1lKS5yZXBsYWNlKCJBY3Rpdml0eSIsbmFtZSkKICAgICAgZGVmIG91dChzZWxmLHNpbSk6ICAgICAgICAgICAgICAjIHBhc3MgdG8gY29ubmVjdGVkIG9iamVjdHMKICAgICAgICAgICAgaWYgc2VsZi5jdXN0b21lciE9Tm9uZToKICAgICAgICAgICAgICAgICAgaWYgbGVuKHNlbGYub3V0cHV0KT4wIGFuZCBpc2luc3RhbmNlKHNlbGYsWG9yR2F0ZSk6ICAKICAgICAgICAgICAgICAgICAgICAgICAgaWR4ID0gMSAgIyBzZW5kIHRvIHNlY29uZCBvdXRwdXQKICAgICAgICAgICAgICAgICAgICAgICAgI2lmIHNlbGYuY3VzdG9tZXIuYXR0clsidmFsdWUiXSBvciBsZW4oc2VsZi5vdXRwdXQpPDI6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgidmFsdWUiIGluIHNlbGYuY3VzdG9tZXIuYXR0ciBhbmQgc2VsZi5jdXN0b21lci5hdHRyWyJ2YWx1ZSJdKSBvciBsZW4oc2VsZi5vdXRwdXQpPDI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkeD0wICMgc2VuZCByYXRoZXIgdG8gZmlyc3Qgb3V0cHV0CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihzZWxmLm91dHB1dCk+MjogICMgbW9yZSB0aGFuIDIgb3V0cHV0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHg9aW50KHNlbGYuY3VzdG9tZXIuYXR0clsidmFsdWUiXSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vdXRwdXRbaWR4XS5pbnNlcnQoc2VsZi5jdXN0b21lciwgc2ltKQogICAgICAgICAgICAgICAgICBlbGlmIGxlbihzZWxmLm91dHB1dCk+MSBhbmQgaXNpbnN0YW5jZShzZWxmLE9yR2F0ZSk6CiAgICAgICAgICAgICAgICAgICAgICAgICNwYXNzCiAgICAgICAgICAgICAgICAgICAgICAgIE4gPSAwCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihzZWxmLm91dHB1dCkpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpbnQoc2VsZi5jdXN0b21lci5hdHRyWyJ2YWx1ZSJdW2ldKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTiArPSAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub3V0cHV0W2ldLmluc2VydChzZWxmLmN1c3RvbWVyLCBzaW0pCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tZXIuTiA9IE4KICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKHNlbGYub3V0cHV0KSk6ICAjIHNwbGl0IHRvIGFsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm91dHB1dFtpXS5pbnNlcnQoc2VsZi5jdXN0b21lcixzaW0pCiAgICAgIGRlZiBwcmV2KHNlbGYpOgogICAgICAgICAgICBlcD1bXQogICAgICAgICAgICBmb3IgZTAgaW4gUXVldWVkRXZlbnQuaW5zdGFuY2VzOgogICAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oZTAub3V0cHV0KSk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGUwLm91dHB1dFtpXT09c2VsZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXAuYXBwZW5kKGUwKQogICAgICAgICAgICByZXR1cm4gZXAKCiMgLS0tLSBiYXNpYyBtb2RlbCBjbGFzc2VzIChRdWV1ZUV2ZW50IGRlcml2ZWQpIC0tLS0KY2xhc3MgQnBtbkV2ZW50KFF1ZXVlZEV2ZW50KToKICAgICAgUyA9IHt9CiAgICAgIGRlZiBfX2luaXRfXyhzZWxmLG5hbWU9Tm9uZSxjb2RlPU5vbmUpOgogICAgICAgICAgICBRdWV1ZWRFdmVudC5fX2luaXRfXyhzZWxmLG5hbWUpCiAgICAgICAgICAgIHNlbGYuZnVuLHNlbGYucGFyYW0sc2VsZi5jb2RlID0gTm9uZSxOb25lLGNvZGUKICAgICAgICAgICAgc2VsZi5BLHNlbGYucHAsc2VsZi5wcDIsc2VsZi50aXRsZSA9IHsiQS5uIjowfSxbLTEsMF0sWy0xLC0xXSwnJwogICAgICBkZWYgX2Z1bihzZWxmKToKICAgICAgICAgICAgcCA9IHNlbGYucGFyYW0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShwLGxpc3QpOgogICAgICAgICAgICAgICAgICBwID0gW2Zsb2F0KGV2YWwoc2VsZi5hdHRyX3JlcGxhY2Uoc3RyKHMpKSkpIGZvciBzIGluIHBdCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgIHAgPSBmbG9hdChldmFsKHNlbGYuYXR0cl9yZXBsYWNlKHN0cihwKSkpKQogICAgICAgICAgICAjcHJpbnQoIl9mdW46IixzZWxmLmZ1bixwLGxlbihzZWxmLnF1ZXVlKSkKICAgICAgICAgICAgcmV0dXJuIHNlbGYuZnVuKHApIGlmIHNlbGYuZnVuIT1Ob25lIGVsc2UgcAogICAgICBkZWYgYXR0cl9yZXBsYWNlKHNlbGYsY2MpOgogICAgICAgICAgICBpZiBzZWxmLmN1c3RvbWVyIT1Ob25lOgogICAgICAgICAgICAgICAgICBmb3Igayx2IGluIHNlbGYuY3VzdG9tZXIuYXR0ci5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBjYyA9IGNjLnJlcGxhY2UoayxzdHIodikpCiAgICAgICAgICAgIGZvciBrLHYgaW4gQnBtbkV2ZW50LlMuaXRlbXMoKToKICAgICAgICAgICAgICAgICAgY2MgPSBjYy5yZXBsYWNlKGssc3RyKHYpKQogICAgICAgICAgICBmb3Igayx2IGluIHNlbGYuQS5pdGVtcygpOgogICAgICAgICAgICAgICAgICBjYyA9IGNjLnJlcGxhY2UoayxzdHIodikpCiAgICAgICAgICAgIHJldHVybiBjYwogICAgICBkZWYgX2V2YWwoc2VsZixjb2RlLG49LTEpOgogICAgICAgICAgICBjb2Rlcz1zZWxmLmNvZGUuc3BsaXQoIjsiKQogICAgICAgICAgICBpZiBuIT0tMToKICAgICAgICAgICAgICAgICAgY29kZXM9bGVuKGNvZGVzKT5uIGFuZCBbY29kZXNbbl1dIG9yIFtdCiAgICAgICAgICAgIGZvciBjb2RlIGluIGNvZGVzOgogICAgICAgICAgICAgICAgICBjYyA9IGNvZGUuc3BsaXQoIj0iKQogICAgICAgICAgICAgICAgICBjY1swXSA9IGNjWzBdLnN0cmlwKCkKICAgICAgICAgICAgICAgICAgaWYgbGVuKGNjKT09MToKICAgICAgICAgICAgICAgICAgICAgICAgY2M9WyJkdW1teSJdK2NjCiAgICAgICAgICAgICAgICAgIGlmIGxlbihjYyk+MToKICAgICAgICAgICAgICAgICAgICAgICAgY2NbMF0gPSBsZW4oY2NbMF0pPjAgYW5kIGNjWzBdIG9yICJ2YWx1ZSIKICAgICAgICAgICAgICAgICAgICAgICAgY2NbMV0gPSBzZWxmLmF0dHJfcmVwbGFjZSgiPSIuam9pbihjY1sxOl0pKSAjIHJlam9pbgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2PWV2YWwoY2NbMV0pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNjWzBdLnN0YXJ0c3dpdGgoIlMuIik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJwbW5FdmVudC5TW2NjWzBdXT1ldgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGNjWzBdLnN0YXJ0c3dpdGgoIkEuIik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuRVtjY1swXV09ZXYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXN0b21lci5hdHRyW2NjWzBdXT1ldgogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tZXIuYXR0cltjY1swXV09RmFsc2UKY2xhc3MgQ29uZGl0aW9uYWxFdmVudChCcG1uRXZlbnQpOgogICAgICBkZWYgX19pbml0X18oc2VsZiwgY29kZT1Ob25lKToKICAgICAgICAgICAgQnBtbkV2ZW50Ll9faW5pdF9fKHNlbGYsIE5vbmUsIGNvZGUpCiAgICAgIGRlZiBpbnNlcnQoc2VsZiwgY3VzdCwgc2ltKToKICAgICAgICAgICAgY3VzdC5hdHRyWyJfX3QiK3N0cihzZWxmLmlkKSsiYSJdID0gc2ltLm5vdygpCiAgICAgICAgICAgIGN1c3QuYXR0clsiX190IitzdHIoc2VsZi5pZCkrImUiXSA9IC0xCiAgICAgICAgICAgIGlmIHNlbGYuY3VzdG9tZXIgPT0gTm9uZSA6ICMgaWYgZnJlZSBhZGQgdG8gc2ltdWxhdG9yIGNvbmRpdGlvbnMKICAgICAgICAgICAgICAgICAgc2VsZi5jdXN0b21lciA9IGN1c3QKICAgICAgICAgICAgICAgICAgc2VsZi5jdXN0b21lci5hdHRyWyJ2YWx1ZSJdPUZhbHNlCiAgICAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tZXIuYXR0clsiX190IitzdHIoc2VsZi5pZCkrImIiXSA9IHNpbS5ub3coKQogICAgICAgICAgICAgICAgICBzaW0uYWRkX2NvbmRpdGlvbihzZWxmKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICBzZWxmLnF1ZXVlLnB1c2goY3VzdCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgZGVmIGV4ZWMoc2VsZiwgc2ltKToKICAgICAgICAgICAgYiA9IEZhbHNlCiAgICAgICAgICAgIGlmIHNlbGYuY29kZSE9Tm9uZToKICAgICAgICAgICAgICAgICAgc2VsZi5fZXZhbChzZWxmLmNvZGUsMCkKICAgICAgICAgICAgICAgICAgaWYgc2VsZi5jdXN0b21lci5hdHRyWyJ2YWx1ZSJdPT1UcnVlOgogICAgICAgICAgICAgICAgICAgICAgICBjYz1zZWxmLmNvZGUuc3BsaXQoJzsnKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oY2MpPjE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX2V2YWwoIjsiLmpvaW4oY2NbMTpdKSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXN0b21lci5hdHRyWyJfX3QiK3N0cihzZWxmLmlkKSsiZSJdID0gc2ltLm5vdygpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub3V0KHNpbSkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXN0b21lciA9IE5vbmUgICAgIyBtYXJrIHRoYXQgbm93IHRoZSBzZXJ2aWNlIGlzIGZyZWUgISEhCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihzZWxmLnF1ZXVlKT4wIDogICMgYnV0IGlmIGFueWJvZHkgaW4gcXVldWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5pbnNlcnQoc2VsZi5xdWV1ZS5wb3AoKSwgc2ltKSAgIyBnZXQgYW5kIGluc2VydCBpbnRvIHNpbXVsYXRvcgogICAgICAgICAgICAgICAgICAgICAgICBiID0gVHJ1ZSAgIyByZWFkeSB0byBiZSByZW1vdmVkIGZyb20gc2ltdWxhdG9yIGNvbmRpdGlvbnMKICAgICAgICAgICAgcmV0dXJuIGIKY2xhc3MgR2VuZXJhdG9yKEJwbW5FdmVudCk6CiAgICAgIGRlZiBfX2luaXRfXyhzZWxmLCBmdW4sIHBhcmFtLCB0bWF4PTAuMCwgY29kZT1Ob25lKToKICAgICAgICAgICAgQnBtbkV2ZW50Ll9faW5pdF9fKHNlbGYsIE5vbmUsIGNvZGUpCiAgICAgICAgICAgIHNlbGYuZnVuLCBzZWxmLnBhcmFtLCBzZWxmLnRtYXgsIHNlbGYubiA9IGZ1biwgcGFyYW0sIHRtYXgsIDAKICAgICAgICAgICAgaWYgc2VsZi5jb2RlIT1Ob25lIDoKICAgICAgICAgICAgICAgICAgc2VsZi5fZXZhbChzZWxmLmNvZGUpICAgIyBldmFsdWF0ZSBzY3JpcHQgY29kZSAoW3Zhcl09PHZhbHVlPikKICAgICAgZGVmIGV4ZWMoc2VsZiwgc2ltKToKICAgICAgICAgICAgc2VsZi5jdXN0b21lciA9IEN1c3RvbWVyKCkKICAgICAgICAgICAgc2VsZi5jdXN0b21lci5hdHRyWyJfX3QiK3N0cihzZWxmLmlkKSsiYSJdID0gc2ltLm5vdygpCiAgICAgICAgICAgIHNlbGYuY3VzdG9tZXIuYXR0clsiX190IitzdHIoc2VsZi5pZCkrImIiXSA9IHNpbS5ub3coKQogICAgICAgICAgICBzZWxmLmN1c3RvbWVyLmF0dHJbIl9fdCIrc3RyKHNlbGYuaWQpKyJlIl0gPSBzaW0ubm93KCkKICAgICAgICAgICAgc2VsZi5BWyJBLm4iXSArPSAxCiAgICAgICAgICAgIF9wcmludCgiUmVnaXN0ZXJpbmc6ICIgKyBzdHIoc2VsZi5jdXN0b21lcikgKyAiICgiK3N0cihzZWxmLnRpbWUpKyIpIikKICAgICAgICAgICAgc2VsZi5vdXQoc2ltKSAgICAgICAgICAgICAjIHBhc3MgY3VzdG9tZXIgdG8gY29ubmVjdGVkIG9iamVjdAogICAgICAgICAgICBzZWxmLnRpbWUgKz0gc2VsZi5fZnVuKCkKICAgICAgICAgICAgaWYgc2VsZi50bWF4PjAgYW5kIHNlbGYudGltZSA8PSBzZWxmLnRtYXggb3Igc2VsZi5uPC1zZWxmLnRtYXgtMToKICAgICAgICAgICAgICAgICAgc2VsZi5uICs9IDEKICAgICAgICAgICAgICAgICAgc2ltLmFkZChzZWxmKSAgICAgICAjIG5leHQgb25lIGluIHJhbmRvbSB0aW1lCmNsYXNzIFNlcnZpY2UoQnBtbkV2ZW50KToKICAgICAgZGVmIF9faW5pdF9fKHNlbGYsIGZ1biwgcGFyYW0sIGNvZGU9Tm9uZSk6IAogICAgICAgICAgICBCcG1uRXZlbnQuX19pbml0X18oc2VsZiwiQWN0aXZpdHkiLGNvZGUpICAKICAgICAgICAgICAgc2VsZi5mdW4sIHNlbGYucGFyYW0gPSBmdW4sIHBhcmFtIAogICAgICAgICAgICBzZWxmLk4gPSAxICMgTiBudW1iZXIgb2YgdG9rZW5zIHRvIHdhaXQgKHVzZWQgZm9yIEFuZEdhdGUsT3JHYXRlKQogICAgICBkZWYgaW5zZXJ0KHNlbGYsIGN1c3QsIHNpbSk6CiAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2VsZixYb3JHYXRlKToKICAgICAgICAgICAgICAgICAgaWYgbGVuKHNlbGYub3V0cHV0KT4xIGFuZCBzZWxmLmNvZGU9PU5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29kZT0iPUIoMC41KSIKICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKHNlbGYsT3JHYXRlKToKICAgICAgICAgICAgICAgICAgaWYgbGVuKHNlbGYub3V0cHV0KT4xIGFuZCBzZWxmLmNvZGU9PU5vbmU6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY29kZT0iPVsxLCIrIiwiLmpvaW4oWycwJ10qKGxlbihzZWxmLm91dHB1dCktMSkpKyJdIgogICAgICAgICAgICBpZiBzZWxmLmN1c3RvbWVyID09IE5vbmU6ICMgaWYgZnJlZSBhZGQgdG8gc2ltdWxhdG9yIHdpdGggZW5kIHRpbWUKICAgICAgICAgICAgICAgICAgc2VsZi5jdXN0b21lcix0ID0gY3VzdCxzZWxmLl9mdW4oKQogICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHQsbGlzdCk6ICAjIFtjeWNsZSxiZWdpbj0wXSBjeWNsaWMgdGltZXIgKE1NIDEuMTEuMjAyNCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbGVuKHQpPDI6IHQuYXBwZW5kKDApCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYudGltZSA9IHRbMV0rbWF0aC5jZWlsKChzaW0ubm93KCktdFsxXSkvdFswXSkqdFswXQogICAgICAgICAgICAgICAgICAgICAgICAjX3ByaW50KCIjICIrc3RyKHNlbGYuY3VzdG9tZXIpKyI6ICIrc3RyKHNpbS5ub3coKSkrIiAiK3N0cihzZWxmLnRpbWUpKQogICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnRpbWUgPSBzaW0ubm93KCkgKyB0CiAgICAgICAgICAgICAgICAgIF9wcmludCgiIyIrc3RyKHNlbGYuaWQpKyIgc3RhcnRzIHNlcnZpbmcgIisKICAgICAgICAgICAgICAgICAgICAgICAgIHN0cihjdXN0KSsiICgiK3N0cihzaW0ubm93KCkpKyIsIitzdHIoc2VsZi50aW1lKSsiKSIpCiAgICAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tZXIuYXR0clsiX190IitzdHIoc2VsZi5pZCkrImIiXT1zaW0ubm93KCkKICAgICAgICAgICAgICAgICAgaWYgIl9fbiIrc3RyKHNlbGYuaWQpIG5vdCBpbiBzZWxmLmN1c3RvbWVyLmF0dHI6CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VzdG9tZXIuYXR0clsiX19uIitzdHIoc2VsZi5pZCldID0gMCAjIGZpcnN0IHRpbWUKICAgICAgICAgICAgICAgICAgaWYgIl9fdCIrc3RyKHNlbGYuaWQpKyJhIiBub3QgaW4gc2VsZi5jdXN0b21lci5hdHRyOgogICAgICAgICAgICAgICAgICAgICAgICBjdXN0LmF0dHJbIl9fdCIrc3RyKHNlbGYuaWQpKyJhIl09c2ltLm5vdygpICMgaWYgbm90IGZyb20gcXVldWUKICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShzZWxmLFRpbWVyKSBhbmQgbm90IGlzaW5zdGFuY2UodCxsaXN0KTogICMgbW9kaWZ5IHJlcXVpcmVkIGZpbmFsIGV4ZWN1dGlvbiB0aW1lCiAgICAgICAgICAgICAgICAgICAgICAgIHRhPWN1c3QuYXR0clsiX190IitzdHIoc2VsZi5pZCkrImEiXSAgCiAgICAgICAgICAgICAgICAgICAgICAgIHRiPWN1c3QuYXR0clsiX190IitzdHIoc2VsZi5pZCkrImIiXQogICAgICAgICAgICAgICAgICAgICAgICBjdXN0LmF0dHJbIl9fdCIrc3RyKHNlbGYuaWQpKyJiIl0gLT0gKHRiLXRhKSAjIGRlY3JlYXNlIGJlZ2luIHRpbWUKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50aW1lIC09ICh0Yi10YSkgICMgLi4uIGJ5IHRoZSBkaWZmZXJlbmNlIGVsYXBzZWQgYWxyZWFkeQogICAgICAgICAgICAgICAgICAgICAgICAjX3ByaW50KCIjICIrc3RyKHNlbGYuY3VzdG9tZXIpKyI6ICIrc3RyKHNlbGYudGltZSkpCiAgICAgICAgICAgICAgICAgIHNpbS5hZGQoc2VsZikKICAgICAgICAgICAgZWxzZTogICAgICAgICAgICAgICAgICAgICAjIGVsc2UgaW5zZXJ0IGludG8gcXVldWUKICAgICAgICAgICAgICAgICAgY3VzdC5hdHRyWyJfX3QiK3N0cihzZWxmLmlkKSsiYSJdPXNpbS5ub3coKSAgIyB3aXRoIGEgcXVldWUgYWRkaW5nIHRpbXN0YW1wCiAgICAgICAgICAgICAgICAgIHNlbGYucXVldWUucHVzaChjdXN0KQogICAgICBkZWYgZXhlYyhzZWxmLCBzaW0pOgogICAgICAgICAgICBpZiBzZWxmLmN1c3RvbWVyIT1Ob25lOgogICAgICAgICAgICAgICAgICBzZWxmLmN1c3RvbWVyLmF0dHJbIl9fdCIrc3RyKHNlbGYuaWQpKyJlIl09c2ltLm5vdygpCiAgICAgICAgICAgICAgICAgIHNlbGYuQVsiQS5uIl0gKz0gMQogICAgICAgICAgICBfcHJpbnQoIiMiK3N0cihzZWxmLmlkKSsiIGZpbmlzaGVkIHNlcnZpbmcgIiArIHN0cihzZWxmLmN1c3RvbWVyKSArICIgYXQgIiArIHN0cihzZWxmLnRpbWUpKQogICAgICAgICAgICBpZiBzZWxmLmNvZGUhPU5vbmUgOiAgICAgIAogICAgICAgICAgICAgICAgICBzZWxmLl9ldmFsKHNlbGYuY29kZSkgICAjIGV2YWx1YXRlIHNjcmlwdCBjb2RlIChbdmFyXT08dmFsdWU+KQogICAgICAgICAgICBpZiBzZWxmLmN1c3RvbWVyIT1Ob25lOgogICAgICAgICAgICAgICAgICBzZWxmLmN1c3RvbWVyLmF0dHJbIl9fbiIrc3RyKHNlbGYuaWQpXSArPSAxCiAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2VsZixPckdhdGUpIGFuZCBsZW4oc2VsZi5vdXRwdXQpPT0xOgogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLk4gPSBzZWxmLmN1c3RvbWVyLk4KICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuY3VzdG9tZXIuYXR0clsiX19uIitzdHIoc2VsZi5pZCldJXNlbGYuTikgPT0gMDogI3NlbGYuTjoKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5vdXQoc2ltKSAgICAgIyBwYXNzIGN1c3RvbWVyIHRvIGNvbm5lY3RlZCBvYmplY3QKICAgICAgICAgICAgc2VsZi5jdXN0b21lciA9IE5vbmUgICAgIyBtYXJrIHRoYXQgbm93IHRoZSBzZXJ2aWNlIGlzIGZyZWUgISEhCiAgICAgICAgICAgIGlmIGxlbihzZWxmLnF1ZXVlKT4wIDogICMgYnV0IGlmIGFueWJvZHkgaW4gcXVldWUKICAgICAgICAgICAgICAgICAgU2VydmljZS5pbnNlcnQoc2VsZixzZWxmLnF1ZXVlLnBvcCgpLCBzaW0pICAjIGdldCBhbmQgaW5zZXJ0IGludG8gc2ltdWxhdG9yCmNsYXNzIFNpbmsoQnBtbkV2ZW50KToKICAgICAgZGVmIGluc2VydChzZWxmLCBjdXN0LCBzaW0pOiAgICAKICAgICAgICAgICAgX3ByaW50KCJTaW5raW5nICIrc3RyKGN1c3QpKyIgOiAiK3N0cihzaW0ubm93KCkpKQogICAgICAgICAgICBjdXN0LmF0dHJbIl9fdCIrc3RyKHNlbGYuaWQpKyJhIl0gPSBzaW0ubm93KCkgICMgbWFyayB0aW1lIGluIGN1c3RvbWVyIGF0dHJpYnV0ZXMKICAgICAgICAgICAgY3VzdC5hdHRyWyJfX3QiK3N0cihzZWxmLmlkKSsiYiJdID0gc2ltLm5vdygpICAjIG1hcmsgdGltZSBpbiBjdXN0b21lciBhdHRyaWJ1dGVzCiAgICAgICAgICAgIGN1c3QuYXR0clsiX190IitzdHIoc2VsZi5pZCkrImUiXSA9IHNpbS5ub3coKSAgIyBtYXJrIHRpbWUgaW4gY3VzdG9tZXIgYXR0cmlidXRlcwogICAgICAgICAgICBzZWxmLkFbIkEubiJdICs9IDEKICAgICAgICAgICAgc2VsZi5xdWV1ZS5wdXNoKGN1c3QpICAgICAjIGluc2VydCBvbmx5IHRvIGl0cyBxdWV1ZQogICAgICAgICAgICBzZWxmLmN1c3RvbWVyPWN1c3QKICAgICAgICAgICAgaWYgc2VsZi5jb2RlIT1Ob25lIDoKICAgICAgICAgICAgICAgICAgc2VsZi5fZXZhbChzZWxmLmNvZGUpICAgIyBldmFsdWF0ZSBzY3JpcHQgY29kZQojIC0tLS0gYnBtbiBkZXJpdmVkIGNsYXNzZXMgKGZyb20gR2VuZXJhdG9yLCBTZXJ2aWNlLCBDb25kaXRpb25hbEV2ZW50IG9yIFNpbmspIC0tLS0KY2xhc3MgWG9yR2F0ZShTZXJ2aWNlKTogICAgIyByYW5kb20gb3V0cHV0IGlmIHR3byBvdXRwdXRzIAogICAgICBkZWYgX19pbml0X18oc2VsZixjb2RlPU5vbmUpOiAgIyBkZWZhdWx0cyB0byBiaW5hcnkgcmFuZG9tIHNlbGVjdGlvbgogICAgICAgICAgICBTZXJ2aWNlLl9faW5pdF9fKHNlbGYsTm9uZSwwLGNvZGUpCiAgICAgICAgICAgIHNlbGYuc2V0TmFtZSgiZXhjbHVzaXZlR2F0ZXdheSIpCmNsYXNzIE9yR2F0ZShTZXJ2aWNlKTogICAgIyBvdXRwdXQgY29uZGl0aW9uIG11c3QgYmUgZGVmaW5lZCBieSBhcnJheSBvZiB2YWx1ZXMhIAogICAgICBkZWYgX19pbml0X18oc2VsZixjb2RlPU5vbmUpOgogICAgICAgICAgICBTZXJ2aWNlLl9faW5pdF9fKHNlbGYsTm9uZSwwLGNvZGUpCiAgICAgICAgICAgIHNlbGYuc2V0TmFtZSgiaW5jbHVzaXZlR2F0ZXdheSIpCmNsYXNzIEFuZEdhdGUoU2VydmljZSk6ICAgIAogICAgICBkZWYgX19pbml0X18oc2VsZixjb2RlPU5vbmUpOgogICAgICAgICAgICBTZXJ2aWNlLl9faW5pdF9fKHNlbGYsTm9uZSwwLGNvZGUpCiAgICAgICAgICAgIHNlbGYuc2V0TmFtZSgicGFyYWxsZWxHYXRld2F5IikKICAgICAgZGVmIGluc2VydChzZWxmLCBjdXN0LCBzaW0pOgogICAgICAgICAgICBpZHM9W2UuaWQgZm9yIGUgaW4gc2VsZi5wcmV2KCldICMgaWRzIG9mIGlucHV0cwogICAgICAgICAgICBzZWxmLk49bGVuKHNldChpZHMpKSAjIHNldCBudW1iZXIgb2YgaW5wdXRzICh3aXRoIHVuaXF1ZSBpZHMpIHRvIHdhaXQKICAgICAgICAgICAgU2VydmljZS5pbnNlcnQoc2VsZixjdXN0LHNpbSkKY2xhc3MgU3RhcnQoR2VuZXJhdG9yKToKICAgICAgZGVmIF9faW5pdF9fKHNlbGYsZnVuPUUscGFyYW09WzFdLHRubWF4PTUwLjAsY29kZT1Ob25lKToKICAgICAgICAgICAgR2VuZXJhdG9yLl9faW5pdF9fKHNlbGYsZnVuLHBhcmFtLHRubWF4LGNvZGUpCiAgICAgICAgICAgIHNlbGYuc2V0TmFtZSgic3RhcnRFdmVudCIpCmNsYXNzIFRhc2soU2VydmljZSk6CiAgICAgIGRlZiBfX2luaXRfXyhzZWxmLGZ1bj1VLHBhcmFtPVsxLDJdLGNvZGU9Tm9uZSxNPTEpOgogICAgICAgICAgICBTZXJ2aWNlLl9faW5pdF9fKHNlbGYsZnVuLHBhcmFtLGNvZGUpCiAgICAgICAgICAgIHNlbGYuc2V0TmFtZSgidGFzayIpCiAgICAgICAgICAgIHNlbGYuc2VydmVycywgc2VsZi5uc2VydmVyLCBzZWxmLk0gPSBbXSwgMCwgTQogICAgICAgICAgICBmb3IgaSBpbiByYW5nZShzZWxmLk0tMSk6CiAgICAgICAgICAgICAgICAgIEV2ZW50LmNudCAtPTEKICAgICAgICAgICAgICAgICAgc2VsZi5zZXJ2ZXJzLmFwcGVuZChTZXJ2aWNlKGZ1bixwYXJhbSxjb2RlKSkKICAgICAgZGVmIGluc2VydChzZWxmLCBjdXN0LCBzaW0pOgogICAgICAgICAgICBpZihzZWxmLm5zZXJ2ZXI9PTApOiAgIyBteXNlbGYKICAgICAgICAgICAgICAgICAgU2VydmljZS5pbnNlcnQoc2VsZixjdXN0LHNpbSkKICAgICAgICAgICAgZWxzZTogICAgICAgICAgICAgICMgb3RoZXJzZWxmcwogICAgICAgICAgICAgICAgICBzZWxmLnNlcnZlcnNbc2VsZi5uc2VydmVyLTFdLmluc2VydChjdXN0LHNpbSkKICAgICAgICAgICAgc2VsZi5uc2VydmVyID0gKHNlbGYubnNlcnZlcisxKSVzZWxmLk0KY2xhc3MgVGltZXIoU2VydmljZSk6CiAgICAgIGRlZiBfX2luaXRfXyhzZWxmLGZ1bj0xLHBhcmFtPU5vbmUsY29kZT1Ob25lKToKICAgICAgICAgICAgaWYgbm90IGNhbGxhYmxlKGZ1bik6ICAjIHdoZW4gcGFzc2luZyBmaXhlZCBkZWxheSB2YWx1ZQogICAgICAgICAgICAgICAgICBmdW4scGFyYW0sY29kZSA9IE5vbmUsZnVuLHBhcmFtCiAgICAgICAgICAgIFNlcnZpY2UuX19pbml0X18oc2VsZixmdW4scGFyYW0sY29kZSkKICAgICAgICAgICAgc2VsZi5zZXROYW1lKCJpbnRlcm1lZGlhdGVDYXRjaEV2ZW50IikKY2xhc3MgRW5kKFNpbmspOgogICAgICAjZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAjICAgICAgU2luay5fX2luaXRfXyhzZWxmKQogICAgICAjICAgICAgc2VsZi5zZXROYW1lKCJlbmRFdmVudCIpCiAgICAgIGRlZiBfX2luaXRfXyhzZWxmLGNvZGU9Tm9uZSk6CiAgICAgICAgICAgIFNpbmsuX19pbml0X18oc2VsZiwiZW5kRXZlbnQiLGNvZGUpCmNsYXNzIFRocm93KFNlcnZpY2UpOgogICAgICBkZWYgX19pbml0X18oc2VsZik6CiAgICAgICAgICAgIFNlcnZpY2UuX19pbml0X18oc2VsZixOb25lLDApCiAgICAgICAgICAgIHNlbGYuc2V0TmFtZSgiaW50ZXJtZWRpYXRlVGhyb3dFdmVudCIpCmNsYXNzIFRlcm1pbmF0ZShFbmQpOgogICAgICBkZWYgX19pbml0X18oc2VsZixjb2RlPU5vbmUpOgogICAgICAgICAgICBFbmQuX19pbml0X18oc2VsZixjb2RlKQogICAgICAgICAgICBzZWxmLnNldE5hbWUoInRlcm1pbmF0ZUVuZEV2ZW50IikKY2xhc3MgU2NyaXB0KFNlcnZpY2UpOgogICAgICBkZWYgX19pbml0X18oc2VsZixjb2RlPU5vbmUpOgogICAgICAgICAgICBTZXJ2aWNlLl9faW5pdF9fKHNlbGYsTm9uZSwwLGNvZGUpCiAgICAgICAgICAgIHNlbGYuc2V0TmFtZSgic2NyaXB0VGFzayIpCmNsYXNzIENvbmRpdGlvbihDb25kaXRpb25hbEV2ZW50KToKICAgICAgZGVmIF9faW5pdF9fKHNlbGYsY29kZT1Ob25lKToKICAgICAgICAgICAgQ29uZGl0aW9uYWxFdmVudC5fX2luaXRfXyhzZWxmLGNvZGUpCiAgICAgICAgICAgIHNlbGYuc2V0TmFtZSgiaW50ZXJtZWRpYXRlQ2F0Y2hFdmVudCIpCgojIC0tLS0gdXRpbDIgLS0tLS0tLS0gICAgICAKZGVmIGNvbm5lY3QoYSwgYik6CiAgICAgIGEub3V0cHV0LmFwcGVuZChiKQogICAgICBpZiBpc2luc3RhbmNlKGEsVGFzayk6CiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKGxlbihhLnNlcnZlcnMpKTogICMgZmlyc3Qgc2VydmVyIGlzIGFscmVhZHkgY29ubmVjdGVkCiAgICAgICAgICAgICAgICAgIGEuc2VydmVyc1tpXS5vdXRwdXQuYXBwZW5kKGIpCmRlZiBkaWN0X3Rvc3RyaW5nKGEpOgogICAgICByZXR1cm4gIlxuIi5qb2luKFtrKyI6XHQiK3N0cih2KSBmb3Igayx2IGluIGEuaXRlbXMoKV0pCiIiIgpkZWYgaGlzdChhPVswLDFdLCBiPTIwLCBjPSdvcmFuZ2UnKToKICAgICAgaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAogICAgICBwbHQuaGlzdChhLGIsY29sb3I9YykKICAgICAgI3BsdC5zYXZlZmlnKCJkZXNfcGxvdC5zdmciLCBmb3JtYXQ9InN2ZyIpCiAgICAgICNwbHQuc2hvdygpCiAgICAgIGltcG9ydCBpbywgYmFzZTY0CiAgICAgIGJ1ZiA9IGlvLkJ5dGVzSU8oKQogICAgICBwbHQuc2F2ZWZpZyhidWYsIGZvcm1hdD0nc3ZnJykKICAgICAgYnVmLnNlZWsoMCkKICAgICAgcmV0dXJuICdkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCcgKyBiYXNlNjQuYjY0ZW5jb2RlKGJ1Zi5yZWFkKCkpLmRlY29kZSgnVVRGLTgnKQoiIiIKZGVmIGZyb21fZmlsZShmbmFtZSk6CiAgICAgIHdpdGggb3BlbihmbmFtZSwiciIpIGFzIGZwOgogICAgICAgICAgICByZXR1cm4gZnAucmVhZCgpCgojIC0tLS0gY29udmVyc2lvbnMgLS0tLS0tLS0gICAgICAKZGVmIGF0dHJfdG9zdHJpbmcoYSk6CiAgICAgIHM9Im5hbWU6ICIrYVsibmFtZSJdKyJcbiIKICAgICAgZm9yIGkgaW4gcmFuZ2UoMSwxMDApOgogICAgICAgICAgICB0PSJfX3QiK3N0cihpKQogICAgICAgICAgICBpZiB0KyJiIiBpbiBhOgogICAgICAgICAgICAgICAgICBzKz10KyIgIisiJS4zZiIlYVt0KyJiIl0rIiAiKyIlLjNmIiVhW3QrImUiXSsiXG4iCiAgICAgIHJldHVybiBzCmRlZiBhdHRyX3Rvc3Znc3RyaW5nKG8sd21heCx3PTE2LGg9MjQpOgogICAgICBnbG9iYWwgbmUKICAgICAgYSxzID0gby5hdHRyLCIiCiAgICAgIGM9Wydob3RwaW5rJywnbGltZWdyZWVuJywnY29ybmZsb3dlcmJsdWUnLCdjb3JhbCcsJ21lZGl1bXNlYWdyZWVuJywnbWVkaXVtcHVycGxlJ10KICAgICAgZm9yIGkgaW4gcmFuZ2UoMTAwKToKICAgICAgICAgICAgdD0iX190IitzdHIoaSkKICAgICAgICAgICAgaWYgdCsiYiIgaW4gYToKICAgICAgICAgICAgICAgICAgcys9Jzx0ZXh0IHg9IjgiIHk9Iicrc3RyKDMyK2gqaSkrJyI+JytzdHIoaSkrJzx0aXRsZT4nK3N0cihuZS5lZVtpLTFdLm5hbWUpKycgJytzdHIobmUuZWVbaS0xXS50aXRsZSkrJzwvdGl0bGU+PC90ZXh0PlxuJwogICAgICAgICAgICAgICAgICBzKz0nPHRleHQgY2xhc3M9InQxIiBzdHlsZT0iZGlzcGxheTpub25lO2ZpbGw6Z3JheSIgeD0iMzIiIHk9Iicrc3RyKDMyK2gqaSkrJyI+JytzdHIobmUuZWVbaS0xXS50aXRsZSkrJzx0aXRsZT4nK3N0cihuZS5lZVtpLTFdLm5hbWUpKyc8L3RpdGxlPjwvdGV4dD5cbicKICAgICAgICAgICAgICAgICAgdDAsdDEsdDIgPSBhW3QrImEiXSxhW3QrImIiXSxhW3QrImUiXQogICAgICAgICAgICAgICAgICBzKz0nPHJlY3QgeT0iJytzdHIoMjAraCppKSsnIiB4PSInK3N0cigyMCt3KnQxKQogICAgICAgICAgICAgICAgICBzKz0nIiB3aWR0aD0iJytzdHIodDItdDE9PTAgYW5kIDEgb3IgdyoodDItdDEpKSsnIiBoZWlnaHQ9Iicrc3RyKGgtMikrJyIgc3Ryb2tlPSJibGFjayIgZmlsbC1vcGFjaXR5PSIwLjciIGZpbGw9IicKICAgICAgICAgICAgICAgICAgcys9KGNbaW50KGFbImNuYW1lIl0uc3BsaXQoJyAnKVswXSklbGVuKGMpXSkrJyI+PHRpdGxlPicrYVsiY25hbWUiXSsnIFsnKygiJS4yZiwgIiV0MCkrKCIlLjJmLCAiJXQxKSsoIiUuMmYiJXQyKSsnXScrJzwvdGl0bGU+PC9yZWN0PlxuJwogICAgICAgICAgICAgICAgICBpZiB0Mi10MT4wLjU6CiAgICAgICAgICAgICAgICAgICAgICAgIHMrPSc8dGV4dCB4PSInK3N0cigyMCt3KnQxKzIpKyciIHk9Iicrc3RyKDIwK2gqaSsxOCkrJyI+JythWyJjbmFtZSJdKyc8L3RleHQ+JwogICAgICAgICAgICAgICAgICBpZiB3KnQxPndtYXhbMF06CiAgICAgICAgICAgICAgICAgICAgICAgIHdtYXhbMF0gPSB3KnQxCiAgICAgIHJldHVybiBzCmRlZiB0b19zdmcoZWU9UXVldWVkRXZlbnQuaW5zdGFuY2VzKToKICAgICAgdyxoLFcsSCA9IDE2LDI0LFsxNjBdLDQwICAjIFdbMF0gZm9yIHBhc3NpbmcgYnkgcmVmZXJlbmNlISEhCiAgICAgIHMgPSAnPHN2ZyBvbmNsaWNrPSJvbl9jbGljaygpIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHdpZHRoPSIlZCIgaGVpZ2h0PSIlZCI+XG4nCiAgICAgIGZvciBlIGluIGVlOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGUsRW5kKToKICAgICAgICAgICAgICAgICAgZm9yIGMgaW4gZS5xdWV1ZS5vYmplY3RzOgogICAgICAgICAgICAgICAgICAgICAgICBzICs9IGF0dHJfdG9zdmdzdHJpbmcoYyxXLHcsaCkKICAgICAgICAgICAgSCArPSAyNAogICAgICBIKz0yNAogICAgICBzKz0gJzxyZWN0IHg9IjIwIiB5PSIxMCIgd2lkdGg9IiVkIiBoZWlnaHQ9IjIiLz5cbiclKFdbMF0rdykKICAgICAgcys9ICc8cmVjdCB4PSIyMCIgeT0iJWQiIHdpZHRoPSIlZCIgaGVpZ2h0PSIyIi8+XG4nJShIKzEwLFdbMF0rdykKICAgICAgZm9yIGkgaW4gcmFuZ2UoaW50KFdbMF0vdysyKSk6CiAgICAgICAgICAgIHMgKz0gJzxyZWN0IHg9Iicrc3RyKDIwK3cqaSkrJyIgeT0iMTAiIHdpZHRoPSIxIiBoZWlnaHQ9IjEwIi8+XG4nCiAgICAgICAgICAgIHMgKz0gJzxyZWN0IHg9Iicrc3RyKDIwK3cqaSkrJyIgeT0iJWQiIHdpZHRoPSIxIiBoZWlnaHQ9IjEwIi8+XG4nJShIKQogICAgICAgICAgICBpZiAoaSUxMCk9PTA6CiAgICAgICAgICAgICAgICAgIHMrPSc8dGV4dCB4PSInK3N0cigyMCt3KmktOCkrJyIgeT0iMzIiPicrc3RyKGkpKyc8L3RleHQ+XG4nCiAgICAgICAgICAgICAgICAgIHMrPSc8dGV4dCB4PSInK3N0cigyMCt3KmktOCkrJyIgeT0iJWQiPiclKEgpK3N0cihpKSsnPC90ZXh0PlxuJwogICAgICBzICs9ICI8c2NyaXB0PmZ1bmN0aW9uIG9uX2NsaWNrKCkge1suLi5kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0MScpXS5mb3JFYWNoKGU9PmUuc3R5bGUuZGlzcGxheT0oZS5zdHlsZS5kaXNwbGF5PT0nbm9uZSc/Jyc6J25vbmUnKSk7fTwvc2NyaXB0PiIKICAgICAgcmV0dXJuIHMlKFdbMF0rODAsSCsyMCkgKyAnPC9zdmc+XG4nCmRlZiB0b19kb3QwKGVlPVF1ZXVlZEV2ZW50Lmluc3RhbmNlcyk6CiAgICAgIHMgPSdkaWdyYXBoIEJQTU4geyByYW5rZGlyPSJMUiIgcmFua3NlcD0xIG5vZGVzZXA9MVxuJwogICAgICBmb3IgaSBpbiByYW5nZShsZW4oZWUpKToKICAgICAgICAgICAgczEgPSAnICB7cmFuaz1zYW1lOyAnCiAgICAgICAgICAgIGZvciBqIGluIHJhbmdlKGxlbihlZVtpXS5vdXRwdXQpKToKICAgICAgICAgICAgICAgICAgcyArPSAiICAiK3N0cihlZVtpXS5pZCkgKyAiIC0+ICIgKyBzdHIoZWVbaV0ub3V0cHV0W2pdLmlkKSArIlxuIgogICAgICAgICAgICAgICAgICBzMSArPSBzdHIoZWVbaV0ub3V0cHV0W2pdLmlkKSArIjsgIgogICAgICAgICAgICBpZiBsZW4oZWVbaV0ub3V0cHV0KT4xOgogICAgICAgICAgICAgICAgICBpZiBhYnMoZWVbaV0ub3V0cHV0WzBdLmlkLWVlW2ldLm91dHB1dFsxXS5pZCk8MjogcyArPSBzMSArJ31cbicKICAgICAgcmV0dXJuIHMrJ30nCmRlZiB0b19kb3QoZWU9UXVldWVkRXZlbnQuaW5zdGFuY2VzKToKICAgICAgcyA9J2RpZ3JhcGggQlBNTjIgeyByYW5rZGlyPSJMUiIgbm9kZXNlcD0wLjZcbicKICAgICAgZm9yIGkgaW4gcmFuZ2UobGVuKGVlKSk6CiAgICAgICAgICAgIGxhYmVsLHhsYWJlbCxzaGFwZSxzdHlsZSxjb2xvcixwZW4gPSBzdHIoZWVbaV0uaWQpLCIiLCJyZWN0IiwiIiwiIiwiMSIKICAgICAgICAgICAgc2l6ZT0iIgogICAgICAgICAgICBpZiAidmVudCIgaW4gZWVbaV0ubmFtZTogc2hhcGU9ImNpcmNsZSIKICAgICAgICAgICAgZWxpZiAiYXRld2F5IiBpbiBlZVtpXS5uYW1lOiBzaGFwZT0iZGlhbW9uZCI7IHNpemU9ImhlaWdodD0wLjciCiAgICAgICAgICAgIGlmICJpbnRlcm1lZGlhdGUiIGluIGVlW2ldLm5hbWU6IHNoYXBlPSJkb3VibGVjaXJjbGUiCiAgICAgICAgICAgIGlmIHNoYXBlPT0icmVjdCI6IHN0eWxlPSJyb3VuZGVkLGZpbGxlZCI7IGNvbG9yPSJsaWdodGJsdWUiOyBzaXplPSJ3aWR0aD0xLjEgaGVpZ2h0PTAuOCIKICAgICAgICAgICAgZWxpZiAiZW5kIiBpbiBlZVtpXS5uYW1lOiBzdHlsZT0iZmlsbGVkIjsgcGVuPSIzIgogICAgICAgICAgICBpZiAiZXhjbHVzaXZlIiBpbiBlZVtpXS5uYW1lOiB4bGFiZWw9bGFiZWw7IGxhYmVsPSJYIgogICAgICAgICAgICBlbGlmICJwYXJhbGxlbCIgaW4gZWVbaV0ubmFtZTogeGxhYmVsPWxhYmVsOyBsYWJlbD0iKyIKICAgICAgICAgICAgZWxpZiAiaW5jbHVzaXZlIiBpbiBlZVtpXS5uYW1lOiB4bGFiZWw9bGFiZWw7IGxhYmVsPSJPIgogICAgICAgICAgICBzICs9ICcgICcrZWVbaV0ubmFtZSArJyBbbGFiZWw9IicrbGFiZWwrJyIgeGxhYmVsPSInK3hsYWJlbAogICAgICAgICAgICBzICs9ICciIHN0eWxlPSInK3N0eWxlKyciIHNoYXBlPSInK3NoYXBlKyciIGZpbGxjb2xvcj0iJwogICAgICAgICAgICBzICs9IGNvbG9yKyciIHBlbndpZHRoPSInK3BlbisnIiAnK3NpemUrJ10nICsnXG4nCiAgICAgIGZvciBpIGluIHJhbmdlKGxlbihlZSkpOgogICAgICAgICAgICBzMSA9ICcgIHtyYW5rPXNhbWU7ICcKICAgICAgICAgICAgZm9yIGogaW4gcmFuZ2UobGVuKGVlW2ldLm91dHB1dCkpOgogICAgICAgICAgICAgICAgICBzICs9ICIgICIrZWVbaV0ubmFtZSArICIgLT4gIiArIGVlW2ldLm91dHB1dFtqXS5uYW1lICsiXG4iCiAgICAgICAgICAgICAgICAgIHMxICs9IGVlW2ldLm91dHB1dFtqXS5uYW1lICsiOyAiCiAgICAgICAgICAgIGlmIGxlbihlZVtpXS5vdXRwdXQpPjE6CiAgICAgICAgICAgICAgICAgIGlmIGFicyhlZVtpXS5vdXRwdXRbMF0uaWQtZWVbaV0ub3V0cHV0WzFdLmlkKTwyOiBzICs9IHMxICsnfVxuJwogICAgICByZXR1cm4gcysnfScKZGVmIHRvX3Bvc2l0aW9uKGVlPVF1ZXVlZEV2ZW50Lmluc3RhbmNlcyk6CiAgICAgIHBwPVtdCiAgICAgIGZvciBpIGluIHJhbmdlKGxlbihlZSkpOiAgICMgc2V0IHggcG9zaXRpb24gdG8gdHJlZSBsZXZlbAogICAgICAgICAgICB4LGVwID0gMCxlZVtpXS5wcmV2KCkKICAgICAgICAgICAgZm9yIGlkeCBpbiByYW5nZShsZW4oZXApLTEsLTEsLTEpOgogICAgICAgICAgICAgICAgICBpZiBlcFtpZHhdLnBwWzBdIT0tMToKICAgICAgICAgICAgICAgICAgICAgICAgeD1lcFtpZHhdLnBwWzBdKzEKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgZWVbaV0ucHA9W3gsMF0KICAgICAgICAgICAgcHAuYXBwZW5kKGVlW2ldLnBwKQogICAgICAjcHJpbnQoW18ucHAgZm9yIF8gaW4gZWVdKQogICAgICBmb3IgaSBpbiByYW5nZSgxLGxlbihwcCkpOiAjIGluY3JlYXNlIHkgcG9zaXRpb24gZm9yIGFsbCBhdCB0aGUgc2FtZSBsZXZlbAogICAgICAgICAgICBpZiBwcFtpXVswXT09cHBbaS0xXVswXToKICAgICAgICAgICAgICAgICAgcHBbaV1bMV0gPSBwcFtpLTFdWzFdKzEKICAgICAgICAgICAgICAgICAgZWVbaV0ucHA9cHBbaV0KICAgICAgI3ByaW50KFtfLnBwIGZvciBfIGluIGVlXSkKICAgICAgIyIiIgogICAgICBmb3IgaSBpbiByYW5nZShsZW4oZWUpLTEsLTEsLTEpOiAgICMgc2V0IHkgcG9zaXRpb24gdG8gdGhlIGxldmVsIG9mIHByZXZpb3VzIAogICAgICAgICAgICBlID0gZWVbaV0ucHJldigpCiAgICAgICAgICAgIGlmIGxlbihlKT4wIGFuZCBlWzBdLm91dHB1dFswXT09ZWVbaV06CiAgICAgICAgICAgICAgICAgIHBwW2ldWzFdID0gZVswXS5wcFsxXQogICAgICAgICAgICAgICAgICBlZVtpXS5wcD1wcFtpXQogICAgICAgICAgICBpZiBsZW4oZSk+MCBhbmQgbGVuKGVbMF0ub3V0cHV0KT4xIGFuZCBlWzBdLm91dHB1dFsxXT09ZWVbaV0gYW5kIGxlbihlZVtpXS5vdXRwdXQpPT0wOgogICAgICAgICAgICAgICAgICBwcFtpXVswXSA9IGVlW2ldLnBwWzBdLTEgICMgd2hlbiBpdCBpcyB0aGUgc2Vjb25kIGFuZCBoYXMgbm8gb3VwdXQKICAgICAgICAgICAgICAgICAgZWVbaV0ucHA9cHBbaV0KICAgICAgI3ByaW50KFtfLnBwIGZvciBfIGluIGVlXSkKICAgICAgIyIiIgogICAgICBmb3IgaSBpbiByYW5nZShsZW4oZWUpLTEsLTEsLTEpOiAjIG1vdmUgcHJldmlvdXMgdG8gdGhlIGxldmVsIG9mIGl0cyBmaXJzdCBuZXh0CiAgICAgICAgICAgIGVwPWVlW2ldLnByZXYoKQogICAgICAgICAgICBpZiBsZW4oZXApPjAgYW5kIGVwWzBdLm91dHB1dFswXT09ZWVbaV0gYW5kIGVwWzBdLnBwWzBdPT1lZVtpXS5wcFswXS0xOgogICAgICAgICAgICAgICAgICBpZiBlcFswXS5wcFsxXSE9ZWVbaV0ucHBbMV06CiAgICAgICAgICAgICAgICAgICAgICAgIGVwWzBdLnBwWzFdPWVlW2ldLnBwWzFdCiAgICAgICNwcmludChbXy5wcCBmb3IgXyBpbiBlZV0pICAgICAgCiAgICAgIGZvciBpIGluIHJhbmdlKGxlbihlZSkpOiAgIyBmb3JjZSBwb3NpdGlvbiBmcm9tIHBwMgogICAgICAgICAgICBpZiBlZVtpXS5wcDJbMF0hPS0xOgogICAgICAgICAgICAgICAgICBlZVtpXS5wcFswXT1lZVtpXS5wcDJbMF0KICAgICAgICAgICAgaWYgZWVbaV0ucHAyWzFdIT0tMToKICAgICAgICAgICAgICAgICAgZWVbaV0ucHBbMV09ZWVbaV0ucHAyWzFdCiAgICAgIGZvciBlIGluIGVlOiAgICMgY29ycmVjdCBwb3NpdGlvbiBvZiBib3VuZGFyeSBldmVudHMgCiAgICAgICAgICAgICNpZihlLnBwWzBdPT0wIGFuZCBlLnBwWzFdPT0wKToKICAgICAgICAgICAgaWYoZS5pZCE9ZS5pZDIpOgogICAgICAgICAgICAgICAgICBpZDI9aW50KHN0cihlLmlkMikuc3BsaXQoIi4iKVsxXSkKICAgICAgICAgICAgICAgICAgZS5wcFswXSxlLnBwWzFdID0gZWVbaWQyLTFdLnBwWzBdLGVlW2lkMi0xXS5wcFsxXQogICAgICByZXR1cm4gW2UucHAgZm9yIGUgaW4gZWVdCmRlZiB0b19icG1uKGVlPVF1ZXVlZEV2ZW50Lmluc3RhbmNlcyxwcD1Ob25lKToKICAgICAgcyA9Jzw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVURi04Ij8+XG4nCiAgICAgIHMrPSc8YnBtbjpkZWZpbml0aW9ucyB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIicKICAgICAgcys9JyB4bWxuczpicG1uPSJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L01PREVMIicKICAgICAgcys9JyB4bWxuczpicG1uZGk9Imh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0JQTU4vMjAxMDA1MjQvREkiJwogICAgICBzKz0nIHhtbG5zOmRjPSJodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9EQyInCiAgICAgIHMrPScgeG1sbnM6ZGk9Imh0dHA6Ly93d3cub21nLm9yZy9zcGVjL0RELzIwMTAwNTI0L0RJIicKICAgICAgcys9JyB0YXJnZXROYW1lc3BhY2U9Imh0dHA6Ly9icG1uLmlvL3NjaGVtYS9icG1uIicKICAgICAgcys9JyBpZD0iRGVmaW5pdGlvbnNfMSIgZXhwb3J0ZXI9ImRlcyIgZXhwb3J0ZXJWZXJzaW9uPSIxLjAiPlxuJwogICAgICBzMT0nIDxicG1uOnByb2Nlc3MgaWQ9IlByb2Nlc3NfMSI+XG4nCiAgICAgIHMyPScgPGJwbW5kaTpCUE1ORGlhZ3JhbSBpZD0iQlBNTkRpYWdyYW1fMSI+XG4nCiAgICAgIHMyKz0nICA8YnBtbmRpOkJQTU5QbGFuZSBpZD0iQlBNTlBsYW5lXzEiIGJwbW5FbGVtZW50PSJQcm9jZXNzXzEiPlxuJwogICAgICBzMWE9JycKICAgICAgajEgPSAwICAjIGZsb3cgY291bnRlcgogICAgICBXLEgsVzAsSDAgPSAxMDAsMTAwLDQwLDMwCiAgICAgIGlmIG5vdCBwcDoKICAgICAgICAgICAgcHAgPSBbZS5wcCBmb3IgZSBpbiBlZV0KICAgICAgICAgICAgaWYgcHBbMF1bMF09PS0xOgogICAgICAgICAgICAgICAgICBwcCA9IHRvX3Bvc2l0aW9uKGVlKQogICAgICBmb3IgaSBpbiByYW5nZShsZW4oZWUpKToKICAgICAgICAgICAgbmFtZSA9IGVlW2ldLm5hbWUKICAgICAgICAgICAgaWYgInRlcm1pbmF0ZSIgaW4gbmFtZToKICAgICAgICAgICAgICAgICAgbmFtZT1uYW1lW2xlbigidGVybWluYXRlIik6XQogICAgICAgICAgICBlbmFtZSA9IGVlW2ldLl9fY2xhc3NfXy5fX25hbWVfXysnXycrc3RyKGVlW2ldLmZ1biBhbmQgZWVbaV0uZnVuLl9fbmFtZV9fIG9yIE5vbmUpKydfJwogICAgICAgICAgICBpbXBvcnQgYmFzZTY0CiAgICAgICAgICAgIGVuYW1lICs9IGJhc2U2NC5iMTZlbmNvZGUoYnl0ZWFycmF5KHN0cihlZVtpXS5wYXJhbSkrJ18nK3N0cihlZVtpXS5jb2RlKSwnYXNjaWknKSkuZGVjb2RlKCdhc2NpaScpICMgcmVxdWlyZXMgZW5jb2RpbmchCiAgICAgICAgICAgIHR5cGU9bmFtZS5zcGxpdCgiXyIpWzBdCiAgICAgICAgICAgIGd0PXsid2kiOjgwLCJoIjo2MCwib3giOjAsIm95IjowLCJlIjooODAsMzApLCJ3IjooMCwzMCksIm4iOig0MCwwKSwicyI6KDQwLDYwKX0KICAgICAgICAgICAgZ2c9eyJ3aSI6MzYsImgiOjM2LCJveCI6MjIsIm95IjoxMiwiZSI6KDU4LDMwKSwidyI6KDIyLDMwKSwibiI6KDQwLDEyKSwicyI6KDQwLDQ4KX0KICAgICAgICAgICAgZzEgPSBndCBpZiAiYXNrIiBpbiB0eXBlIGVsc2UgZ2cKICAgICAgICAgICAgdyxoID0gZzFbIndpIl0sZzFbImgiXSAgIyBpY29uIHNpemUKICAgICAgICAgICAgeGIseWIgPSBXMCtXKnBwW2ldWzBdLCBIMCtIKnBwW2ldWzFdCiAgICAgICAgICAgIHhvLHlvID0geGIrZzFbIm94Il0sIHliK2cxWyJveSJdICMgaWNvbiBvZmZzZXQKICAgICAgICAgICAgaWYgInRhc2siIGluIHR5cGU6CiAgICAgICAgICAgICAgICAgIGlmIGxlbihlZVtpXS5vdXRwdXQpPjE6IHR5cGUgPSAic2VuZFRhc2siCiAgICAgICAgICAgICAgICAgIGlmIGxlbihzZXQoW2UuaWQgZm9yIGUgaW4gZWVbaV0ucHJldigpXSkpPjE6IHR5cGUgPSAicmVjZWl2ZVRhc2siCiAgICAgICAgICAgIGlmIGVlW2ldLmlkICE9IGVlW2ldLmlkMjogICMgZm9yIGJvdW5kYXJ5IGV2ZW50cwogICAgICAgICAgICAgICAgICBpZDIgPSBpbnQoc3RyKGVlW2ldLmlkMikuc3BsaXQoJy4nKVsxXSkKICAgICAgICAgICAgICAgICAgeG8seW8gPSBlZVtpZDItMV0ueCsyMi41LGVlW2lkMi0xXS55KzQyLjUKICAgICAgICAgICAgICAgICAgdHlwZSA9ICJib3VuZGFyeUV2ZW50IgogICAgICAgICAgICBlZVtpXS54LGVlW2ldLnkgPSB4byx5bwogICAgICAgICAgICBzMSs9JyAgPGJwbW46Jyt0eXBlKycgaWQ9IicrbmFtZSsnIiBuYW1lPSInK25hbWUuc3BsaXQoIl8iKVsxXSsnXG4nK2VlW2ldLnRpdGxlKyciPlxuJwogICAgICAgICAgICBzMis9JyAgIDxicG1uZGk6QlBNTlNoYXBlIGlkPSInK25hbWUrJ18nK2VuYW1lKyciIGJwbW5FbGVtZW50PSInK25hbWUrJyI+XG4nCiAgICAgICAgICAgIHMyKz0nICAgIDxkYzpCb3VuZHMgeD0iJytzdHIoeG8pKyciIHk9Iicrc3RyKHlvKSsnIiB3aWR0aD0iJytzdHIodykrJyIgaGVpZ2h0PSInK3N0cihoKSsnIiAvPlxuJwogICAgICAgICAgICBzMis9JyAgIDwvYnBtbmRpOkJQTU5TaGFwZT5cbicKICAgICAgICAgICAgZm9yIGoyIGluIHJhbmdlKGxlbihlZVtpXS5vdXRwdXQpKToKICAgICAgICAgICAgICAgICAgajEgKz0gMQogICAgICAgICAgICAgICAgICBmbG93LGVmbG93PSdGbG93Xycrc3RyKGoxKSwiZGkiCiAgICAgICAgICAgICAgICAgIGlpID0gZWVbaV0ub3V0cHV0W2oyXS5pZC0xCiAgICAgICAgICAgICAgICAgICNwcmludChlZVtpXSxqMixlZVtpXS5vdXRwdXRbajJdLGlpLHBwKQogICAgICAgICAgICAgICAgICB4ZSx5ZSA9IFcwK1cqcHBbaWldWzBdLCBIMCtIKnBwW2lpXVsxXQogICAgICAgICAgICAgICAgICBuYW1lMj1lZVtpXS5vdXRwdXRbajJdLm5hbWUKICAgICAgICAgICAgICAgICAgaWYgInRlcm1pbmF0ZSIgaW4gbmFtZTI6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUyPW5hbWUyW2xlbigidGVybWluYXRlIik6XQogICAgICAgICAgICAgICAgICB0eXBlMj1uYW1lMi5zcGxpdCgiXyIpWzBdCiAgICAgICAgICAgICAgICAgIGcyID0gZ3QgaWYgImFzayIgaW4gdHlwZTIgZWxzZSBnZwogICAgICAgICAgICAgICAgICBpZiB4ZT54YjogIyB0d28gZWRnZXMKICAgICAgICAgICAgICAgICAgICAgICAgZHgxLGR5MSA9IGcxWyJzIl0gaWYgeWI8eWUgZWxzZSBnMVsiZSJdCiAgICAgICAgICAgICAgICAgICAgICAgIGR4MixkeTIgPSBnMlsicyJdIGlmIHliPnllIGVsc2UgZzJbInciXQogICAgICAgICAgICAgICAgICBlbHNlIDogICAgIyB0aHJlZSBlZGdlcwogICAgICAgICAgICAgICAgICAgICAgICBkeDEsZHkxID0gZzFbInMiXSBpZiB5Yjx5ZSBlbHNlIGcxWyJuIl0KICAgICAgICAgICAgICAgICAgICAgICAgZHgyLGR5MiA9IGcyWyJzIl0gaWYgeWI+eWUgZWxzZSBnMlsibiJdCiAgICAgICAgICAgICAgICAgIHgxLHkxID0geGIrZHgxLHliK2R5MQogICAgICAgICAgICAgICAgICB4Mix5MiA9IHhlK2R4Mix5ZStkeTIKICAgICAgICAgICAgICAgICAgczErPScgICA8YnBtbjpvdXRnb2luZz4nK2Zsb3crJzwvYnBtbjpvdXRnb2luZz5cbicKICAgICAgICAgICAgICAgICAgaWYgImludGVybWVkaWF0ZUNhdGNoIiBpbiBuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICBpZiAib25kaXRpb24iIGluIGVuYW1lOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMSs9JyAgIDxicG1uOmNvbmRpdGlvbmFsRXZlbnREZWZpbml0aW9uLz5cbicKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczErPScgICA8YnBtbjp0aW1lckV2ZW50RGVmaW5pdGlvbi8+XG4nCiAgICAgICAgICAgICAgICAgIHMxYSs9JyAgICA8YnBtbjpzZXF1ZW5jZUZsb3cgaWQ9IicrZmxvdysnIiBzb3VyY2VSZWY9IicrbmFtZSsnIiB0YXJnZXRSZWY9IicrbmFtZTIrJyIgLz5cbicKICAgICAgICAgICAgICAgICAgczIrPScgICA8YnBtbmRpOkJQTU5FZGdlIGlkPSInK2Zsb3crJ18nK2VmbG93KyciIGJwbW5FbGVtZW50PSInK2Zsb3crJyI+XG4nCiAgICAgICAgICAgICAgICAgIHMyKz0nICAgIDxkaTp3YXlwb2ludCB4PSInK3N0cih4MSkrJyIgeT0iJytzdHIoeTEpKyciIC8+XG4nCiAgICAgICAgICAgICAgICAgIHh4LHl5ID0gMCwwCiAgICAgICAgICAgICAgICAgIGlmIHkxIT15MjogIyByZXF1aXJlcyBhZGRpdGlvbmFsIHBvaW50cyAob25lIG9yIHR3byBpbXBsZW1lbnRlZCkKICAgICAgICAgICAgICAgICAgICAgICAgeHgsIHl5ID0geTI+eTEgYW5kIHgxIG9yIHgyLCB5Mj55MSBhbmQgeTIgb3IgeTEKICAgICAgICAgICAgICAgICAgICAgICAgaWYgeDE+eDI6ICMgYmFjayBjb25uZWN0aW9uIHJlcXVpcmVzIHR3byBhZGRpdGlvbmFsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHkxPnkyOiAjIGZyb20gbG93ZXIgcG9zaXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeXkgLT0gMzUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczIrPScgICAgPGRpOndheXBvaW50IHg9Iicrc3RyKHgxKSsnIiB5PSInK3N0cih5eSkrJyIgLz5cbicgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgeTE8eTI6ICMgZnJvbSB1cHBlciBwb3NpdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5eSAtPSAyNQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzMis9JyAgICA8ZGk6d2F5cG9pbnQgeD0iJytzdHIoeHgpKyciIHk9Iicrc3RyKHl5KSsnIiAvPlxuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4eCA9IHgyCiAgICAgICAgICAgICAgICAgICAgICAgIHMyKz0nICAgIDxkaTp3YXlwb2ludCB4PSInK3N0cih4eCkrJyIgeT0iJytzdHIoeXkpKyciIC8+XG4nCiAgICAgICAgICAgICAgICAgIGVsaWYgeTE9PXkyIGFuZCB4MT54MjogIyBsb29wYmFjayAtIHJlcXVpcmVzIHR3byBhZGRpdGlvbmFsIHBvaW50cwogICAgICAgICAgICAgICAgICAgICAgICBzMis9JyAgICA8ZGk6d2F5cG9pbnQgeD0iJytzdHIoeDEpKyciIHk9Iicrc3RyKHkxLTMwKSsnIiAvPlxuJwogICAgICAgICAgICAgICAgICAgICAgICBzMis9JyAgICA8ZGk6d2F5cG9pbnQgeD0iJytzdHIoeDIpKyciIHk9Iicrc3RyKHkyLTMwKSsnIiAvPlxuJyAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgaWYgeHghPXgyIG9yIHl5IT15MjoKICAgICAgICAgICAgICAgICAgICAgICAgczIrPScgICAgPGRpOndheXBvaW50IHg9Iicrc3RyKHgyKSsnIiB5PSInK3N0cih5MikrJyIgLz5cbicKICAgICAgICAgICAgICAgICAgczIrPScgICA8L2JwbW5kaTpCUE1ORWRnZT5cbicKICAgICAgICAgICAgaWYgInRlcm1pbmF0ZSIgaW4gZWVbaV0ubmFtZToKICAgICAgICAgICAgICAgICAgczErPScgICA8YnBtbjp0ZXJtaW5hdGVFdmVudERlZmluaXRpb24vPlxuJwogICAgICAgICAgICBzMSs9JyAgPC9icG1uOicrdHlwZSsnPlxuJwogICAgICAgICAgICBwYXNzCiAgICAgIHMyKz0nICA8L2JwbW5kaTpCUE1OUGxhbmU+XG4nCiAgICAgIHMyKz0nIDwvYnBtbmRpOkJQTU5EaWFncmFtPlxuJwogICAgICBzMSs9czFhKycgPC9icG1uOnByb2Nlc3M+XG4nCiAgICAgIHJldHVybiBzK3MxK3MyKyc8L2JwbW46ZGVmaW5pdGlvbnM+XG4nCgplbl90aXRsZSA9ICIiCmNsYXNzIEV2ZW50TmV0d29yaygpOgogICAgICBkZWYgX19pbml0X18oc2VsZixzKToKICAgICAgICAgICAgRXZlbnQuY250LCBDdXN0b21lci5jbnQgPSAwLCAwCiAgICAgICAgICAgIFF1ZXVlZEV2ZW50Lmluc3RhbmNlcy5jbGVhcigpCiAgICAgICAgICAgIEJwbW5FdmVudC5TID0ge30KICAgICAgICAgICAgc2VsZi5lZSA9IHNlbGYuZnJvbV9zdHJpbmcocykKICAgICAgICAgICAgc2VsZi5wcCA9IHRvX3Bvc2l0aW9uKHNlbGYuZWUpCiAgICAgIGRlZiBfX2dldGl0ZW1fXyhzZWxmLGkpOgogICAgICAgICAgICByZXR1cm4gc2VsZi5lZVtpXQogICAgICBkZWYgZnJvbV9zdHJpbmcoc2VsZixzKToKICAgICAgICAgICAgZ2xvYmFsIGVuX3RpdGxlCiAgICAgICAgICAgIGVlLCBFdmVudC5jbnQsIHlsZXZlbCwgZW5fdGl0bGUgPSBbXSwgMCwgLTEsICcnCiAgICAgICAgICAgIHNzID0gcy5zcGxpdCgnXG4nKQogICAgICAgICAgICBmb3IgczAgaW4gc3M6CiAgICAgICAgICAgICAgICAgIHMxID0gczAuc3RyaXAoKQogICAgICAgICAgICAgICAgICBpZiBsZW4oczEpPDIgb3IgczFbMF09PScjJzoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgczE9PXNzWzBdOiAjIHRpdGxlIGluIGZpcnN0IGxpbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5fdGl0bGUgPSBzc1swXVsxOl0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgaWYgIi0+IiBpbiBzMTogIyBjb25uZWN0aW9uIGRlZmluaXRpb24KICAgICAgICAgICAgICAgICAgICAgICAgeWxldmVsICs9IDEgICAjIHVzZWQgZm9yIG1hcmtpbmcgcmVxdWlyZWQgeSBwb3NpdGlvbgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgczFhIGluIHMxLnNwbGl0KCI7Iik6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZSA9IHMxYS5zdHJpcCgpLnNwbGl0KCItPiIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgbGVuKGNvZGUpPjE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlWzFdPWNvZGVbMV0uc3BsaXQoIiMiKVswXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY29kZVswXVswXT09JygnOiBjb2RlWzBdPWNvZGVbMF1bMTotMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNvZGVbMV1bMF09PScoJzogY29kZVsxXT1jb2RlWzFdWzE6LTFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnQgcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYyxkc3QgPSByZS5zcGxpdCgnWyx8XHxdJyxjb2RlWzBdKSxyZS5zcGxpdCgnWyx8XHxdJyxjb2RlWzFdKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHMgaW4gc3JjOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGQgaW4gZHN0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSxqID0gaW50KHMpLTEsIGludChkKS0xCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpPi0xIGFuZCBqPi0xOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdChlZVtpXSxlZVtqXSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGk+LTEgYW5kIGVlW2ldLnBwMlsxXT09LTE6ICMgaWYgbm90IHNldCB5ZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVlW2ldLnBwMlsxXT15bGV2ZWwgIyBmb3JjZSB5IHBvc2l0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBqPi0xIGFuZCBlZVtqXS5wcDJbMV09PS0xOiAjIGlmIG5vdCBzZXQgeWV0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZVtqXS5wcDJbMV09eWxldmVsICMgZm9yY2UgeSBwb3NpdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29kZS5wb3AoMCkKICAgICAgICAgICAgICAgICAgZWxzZTogICAgICAgICAgIyBldmVudCBkZWZpbml0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU9czEuc3BsaXQoIiAiKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oY29kZSk+MToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlMT0iICIuam9pbihjb2RlWzE6XSkuc3BsaXQoJyMnKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVlLmFwcGVuZChldmFsKGNvZGUxWzBdKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZVstMV0uaWQyPWZsb2F0KGNvZGVbMF0uc3BsaXQoJy8nKVswXSkgIyBpZCBhcyB3cml0dGVuIGluIHNvdXJjZSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZVstMV0udGl0bGU9Y29kZTFbMV0uc3RyaXAoKSBpZiBsZW4oY29kZTEpPjEgZWxzZSAnJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNjPWNvZGVbMF0uc3BsaXQoIi8iKSAgIyBjaGVjayBpZGVudGlmaWVyIGZpZWxkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWVbLTFdLnBwMlswXSA9IGZsb2F0KGNjWzFdKS0xIGlmIGxlbihjYyk+MSBlbHNlIC0xIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVlWy0xXS5wcDJbMV0gPSBmbG9hdChjY1syXSktMSBpZiBsZW4oY2MpPjIgZWxzZSAtMQogICAgICAgICAgICBpZiBsZW4oc2V0KFtlLnBwMlsxXSBmb3IgZSBpbiBlZV0pKT09MTogIyB2ZXJpZnkgaWYgbXVsdGktbGluZSBkZXNjcmlwdGlvbgogICAgICAgICAgICAgICAgICBmb3IgZSBpbiBlZTogICAgICAjIGlmIHllcwogICAgICAgICAgICAgICAgICAgICAgICBlLnBwMlsxXT0tMSAjIGNsZWFyIGFsbCB5LWxldmVscyB0byB1bmtub3duCiAgICAgICAgICAgIHJldHVybiBlZQogICAgICBkZWYgdG9fc3RyaW5nKHNlbGYpOgogICAgICAgICAgICBzPScnCiAgICAgICAgICAgIGZvciBlIGluIHNlbGYuZWU6CiAgICAgICAgICAgICAgICAgIHMgKz0gc3RyKGUuaWQpICsgIiAiICsgZS5fX2NsYXNzX18uX19uYW1lX18rIigiCiAgICAgICAgICAgICAgICAgIGlmIGUuX19jbGFzc19fLl9fbmFtZV9fIT0nRW5kJzoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgIkdhdGUiIG5vdCBpbiBlLl9fY2xhc3NfXy5fX25hbWVfXzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArPSBlLmZ1biBhbmQgZS5mdW4uX19uYW1lX18gb3IgJ05vbmUnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgKz0iLCIrc3RyKGUucGFyYW0pKyIsIgogICAgICAgICAgICAgICAgICAgICAgICBpZiBlLl9fY2xhc3NfXy5fX25hbWVfXyE9J1N0YXJ0JzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcys9IGUuY29kZSE9Tm9uZSBhbmQgIlwiIitzdHIoZS5jb2RlKSsiXCIiIG9yICJOb25lIgogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKz1zdHIoZS50bm1heCkKICAgICAgICAgICAgICAgICAgcyArPSIpXG4iCiAgICAgICAgICAgIGZvciBlIGluIGVlOgogICAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oZS5vdXRwdXQpKToKICAgICAgICAgICAgICAgICAgICAgICAgcyArPSBzdHIoZS5pZCkgKyAiLT4iICsgc3RyKGUub3V0cHV0W2ldLmlkKSArJzsnCiAgICAgICAgICAgIHJldHVybiBzICsgJ1xuJwpkZWYgc3ZnX3JvdW5kZWRQYXRoKHBwLCByKToKICAgICAgaW1wb3J0IG1hdGgKICAgICAgcywgbCA9ICIiLCBsZW4ocHApLTEKICAgICAgZm9yIGkgaW4gcmFuZ2UobCk6CiAgICAgICAgICAgIGEsYiA9IHBwW2ldLCBwcFtpKzFdCiAgICAgICAgICAgIHQgPSBtaW4ociAvIG1hdGguaHlwb3QoYlswXS1hWzBdLCBiWzFdLWFbMV0rMC4wMSksIDAuNSkKICAgICAgICAgICAgaWYgaT09MDoKICAgICAgICAgICAgICAgICAgcyArPSAnTSVnICVnICclKGFbMF0sYVsxXSkKICAgICAgICAgICAgaWYgaT4wOgogICAgICAgICAgICAgICAgICBzICs9ICdRJWcgJWcgJWcgJWcgJyUoYVswXSxhWzFdLGFbMF0qKDEtdCkrYlswXSp0LGFbMV0qKDEtdCkrYlsxXSp0KQogICAgICAgICAgICBpZiBpPT1sLTE6CiAgICAgICAgICAgICAgICAgIHMgKz0gJ0wlZyAlZyAnJShiWzBdLGJbMV0pCiAgICAgICAgICAgIGVsaWYgaTxsLTE6CiAgICAgICAgICAgICAgICAgIHMgKz0gJ0wlZyAlZyAnJShhWzBdKnQrYlswXSooMS10KSxhWzFdKnQrYlsxXSooMS10KSkKICAgICAgcmV0dXJuIHMKI05TX01BUCA9IHsKIyAgICBOb25lOiAnaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvQlBNTi8yMDEwMDUyNC9NT0RFTCcsCiMgICAgJ2JwbW5kaSc6ICdodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9CUE1OLzIwMTAwNTI0L0RJJywKIyAgICAnb21nZGMnOiAnaHR0cDovL3d3dy5vbWcub3JnL3NwZWMvREQvMjAxMDA1MjQvREMnLAojICAgICdvbWdkaSc6ICdodHRwOi8vd3d3Lm9tZy5vcmcvc3BlYy9ERC8yMDEwMDUyNC9ESScsCiMgICAgJ3hzaSc6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZScKI30KZGVmIGJwbW5fdG9zdmcwKGJwbW5maWxlLFc9MTAwLEg9ODApOgogICAgICBzID0gJzxkZWZzPjxtYXJrZXIgaWQ9InRyaWFuZ2xlIiB2aWV3Qm94PSIwIDAgMTAgMTAiIHJlZlg9IjEwIiByZWZZPSI1IiBtYXJrZXJVbml0cz0ic3Ryb2tlV2lkdGgiIG1hcmtlcldpZHRoPSIxMCIgbWFya2VySGVpZ2h0PSIxMCIgb3JpZW50PSJhdXRvIj4gPHBhdGggZD0iTSAwIDAgTCAxMCA1IEwgMCAxMCB6IiBmaWxsPSJibGFjayIgLz48L21hcmtlcj48L2RlZnM+XG4nCiAgICAgIGltcG9ydCB4bWwuZXRyZWUuRWxlbWVudFRyZWUgYXMgRVQKICAgICAgZm9yIGUgaW4gRVQucGFyc2UoYnBtbmZpbGUpLmdldHJvb3QoKToKICAgICAgICAgICAgaWYgIkJQTU5EaWFncmFtIiBpbiBlLnRhZzoKICAgICAgICAgICAgICAgICAgZm9yIGQgaW4gZToKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM9W3AgZm9yIHAgaW4gZCBpZiAiQlBNTlBsYW5lIiBpbiBkLnRhZ10KICAgICAgcmV0dXJuIGl0ZW1zCiNkZWYgYnBtbl90b3N2ZyhicG1uZmlsZSxXPTEwMCxIPTgwKToKZGVmIGJwbW5fdG9zdmcoYnBtbnN0cmluZyxpc2FuaW0saXNjb21tZW50cyxpc3NjcmlwdHMsVz0xMDAsSD04MCk6CiAgICAgIHMgPSAnPGRlZnM+PG1hcmtlciBpZD0idHJpYW5nbGUiIHZpZXdCb3g9IjAgMCAxMCAxMCIgcmVmWD0iMTAiIHJlZlk9IjUiIG1hcmtlclVuaXRzPSJzdHJva2VXaWR0aCIgbWFya2VyV2lkdGg9IjEwIiBtYXJrZXJIZWlnaHQ9IjEwIiBvcmllbnQ9ImF1dG8iPiA8cGF0aCBkPSJNIDAgMCBMIDEwIDUgTCAwIDEwIHoiIGZpbGw9ImJsYWNrIiAvPjwvbWFya2VyPjwvZGVmcz5cbicKICAgICAgcyArPSAnPHRleHQgeD0iMTAiIHk9IjEyIj4nK2VuX3RpdGxlKyc8L3RleHQ+XG4nOwogICAgICBpbXBvcnQgeG1sLmV0cmVlLkVsZW1lbnRUcmVlIGFzIEVUCiAgICAgICNmb3IgZSBpbiBFVC5wYXJzZShicG1uZmlsZSkuZ2V0cm9vdCgpOiAgIyBjb2xsZWN0IG5hbWVkIHByb2Nlc3NlcwogICAgICBmb3IgZSBpbiBFVC5mcm9tc3RyaW5nKGJwbW5zdHJpbmcpOiAgIyBjb2xsZWN0IG5hbWVkIHByb2Nlc3NlcwogICAgICAgICAgICBpZiAicHJvY2VzcyIgaW4gZS50YWc6CiAgICAgICAgICAgICAgICAgIGVsZW1zPVtkIGZvciBkIGluIGUgaWYgIm5hbWUiIGluIGQuYXR0cmliXQogICAgICAjZm9yIGUgaW4gRVQucGFyc2UoYnBtbmZpbGUpLmdldHJvb3QoKTogICMgY29sbGVjdCBkaWFncmFtIGVsZW1lbnRzCiAgICAgIGZvciBlIGluIEVULmZyb21zdHJpbmcoYnBtbnN0cmluZyk6ICAjIGNvbGxlY3QgbmFtZWQgcHJvY2Vzc2VzCiAgICAgICAgICAgIGlmICJCUE1ORGlhZ3JhbSIgaW4gZS50YWc6CiAgICAgICAgICAgICAgICAgIGZvciBkIGluIGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zPVtwIGZvciBwIGluIGQgaWYgIkJQTU5QbGFuZSIgaW4gZC50YWddCiAgICAgIGZvciBpdCBpbiBpdGVtczoKICAgICAgICAgICAgcHAsbmFtZSA9IFtdLCIiCiAgICAgICAgICAgIGZvciBlIGluIGVsZW1zOgogICAgICAgICAgICAgICAgICBpZiBpdC5hdHRyaWJbImJwbW5FbGVtZW50Il09PWUuYXR0cmliWyJpZCJdOgogICAgICAgICAgICAgICAgICAgICAgICBuYW1lPSIgIi5qb2luKGUuYXR0cmliWyJuYW1lIl0uc3BsaXQoIiAiKVsxOl0pICMgYXNzdW1lICJpZFxudGV4dCIKICAgICAgICAgICAgZm9yIGogaW4gcmFuZ2UobGVuKGl0KSk6CiAgICAgICAgICAgICAgICAgIHgseSA9IGZsb2F0KGl0W2pdLmF0dHJpYlsieCJdKSxmbG9hdChpdFtqXS5hdHRyaWJbInkiXSkKICAgICAgICAgICAgICAgICAgdyxoID0gKGZsb2F0KGl0W2pdLmF0dHJpYlsid2lkdGgiXSksZmxvYXQoaXRbal0uYXR0cmliWyJoZWlnaHQiXSkpIGlmICJCb3VuZHMiIGluIGl0W2pdLnRhZyBlbHNlICgwLDApCiAgICAgICAgICAgICAgICAgIFcsSCA9IG1heChXLHgrdyksbWF4KEgseStoKQogICAgICAgICAgICAgICAgICAjcHJpbnQoaXQuYXR0cmliWyJpZCJdLCI6Iix4LHksdyxoKQogICAgICAgICAgICAgICAgICBpZiB3PT0wOiAjIGJwbW4gZmxvdwogICAgICAgICAgICAgICAgICAgICAgICBwcC5hcHBlbmQoW3gseV0pCiAgICAgICAgICAgICAgICAgIGVsc2U6ICAgICMgYnBtbiBldmVudAogICAgICAgICAgICAgICAgICAgICAgICBpZHM9aXQuYXR0cmliWyJpZCJdLnNwbGl0KCJfIikKICAgICAgICAgICAgICAgICAgICAgICAgaWQ9aWRzWzFdCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGxlbihpZHMpPjQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydCBiYXNlNjQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzWzRdPWJhc2U2NC5iMTZkZWNvZGUoaWRzWzRdLCdhc2NpaScpLmRlY29kZSgnYXNjaWknKQogICAgICAgICAgICAgICAgICAgICAgICBpZDI9Il8iLmpvaW4oaWRzWzI6XSkucmVwbGFjZSgnPCcsJyZsdDsnKS5yZXBsYWNlKCc+JywnJmd0OycpCiAgICAgICAgICAgICAgICAgICAgICAgIHMrPSc8dGV4dCB4PSInK3N0cih4LTYpKyciIHk9Iicrc3RyKHkraCsxMikrJyI+JytpZCsnPC90ZXh0PlxuJwogICAgICAgICAgICAgICAgICAgICAgICBpZiBpc2NvbW1lbnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKz0nPHRleHQgZm9udC1zaXplPSJzbWFsbGVyIiBzdHlsZT0iZmlsbDpncmF5IiB4PSInK3N0cih4LTEyKSsnIiB5PSInK3N0cih5LTYpKyciPjx0c3BhbiB4bWw6c3BhY2U9InByZXNlcnZlIj4nK25hbWUrJzwvdHNwYW4+PC90ZXh0PlxuJwogICAgICAgICAgICAgICAgICAgICAgICBpZDM9aWQyLnNwbGl0KCJfIikKICAgICAgICAgICAgICAgICAgICAgICAgI2lmIGxlbihpZDMpPjMgYW5kIGlkM1szXSAhPSAiTm9uZSIgOiBzKz0nPHRleHQgY2xhc3M9InQxIiBmb250LXNpemU9InNtYWxsZXIiIHN0eWxlPSJmaWxsOmdyYXkiIHg9Iicrc3RyKHgrMTgpKyciIHk9Iicrc3RyKHkraCsxMisoIkV2ZW50IiBpbiBpdC5hdHRyaWJbImlkIl0gYW5kIDEyIG9yIDApKSsnIj48dHNwYW4geG1sOnNwYWNlPSJwcmVzZXJ2ZSI+JytpZDNbM10rJzwvdHNwYW4+PC90ZXh0PlxuJwogICAgICAgICAgICAgICAgICAgICAgICBpZiBpc3NjcmlwdHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkM2E9Il8iLmpvaW4oaWRzWzI6XSkuc3BsaXQoIl8iKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4oaWQzYSk+MyBhbmQgaWQzYVszXSAhPSAiTm9uZSI6IHMrPSc8dGV4dCBjbGFzcz0idDEiIGZvbnQtc2l6ZT0ic21hbGxlciIgc3R5bGU9ImZpbGw6Z3JheSIgeD0iJytzdHIoeCsxOCkrJyIgeT0iJytzdHIoeStoKzEyKSsnIj48dHNwYW4geG1sOnNwYWNlPSJwcmVzZXJ2ZSI+JytpZDNhWzNdLnNwbGl0KCc7JylbMF0ucmVwbGFjZSgnPCcsJyZsdDsnKS5yZXBsYWNlKCc+JywnJmd0OycpKyc8L3RzcGFuPjwvdGV4dD5cbicKICAgICAgICAgICAgICAgICAgICAgICAgaWYgIkV2ZW50IiBpbiBpdC5hdHRyaWJbImlkIl06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZSA9ICJlbmQiIGluIGl0LmF0dHJpYlsiaWQiXSBhbmQgIjMiIG9yICIxIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciA9ICJlbmQiIGluIGl0LmF0dHJpYlsiaWQiXSBhbmQgInJlZCIgb3IgImRhcmtncmVlbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcys9ICc8ZWxsaXBzZSBjeD0iJytzdHIoeCt3LzIpKyciIGN5PSInK3N0cih5K2gvMikrJyIgcng9Iicrc3RyKHcvMikrJyIgcnk9Iicrc3RyKGgvMikrJyIgc3Ryb2tlLXdpZHRoPSInK3N0cm9rZSsnIiBzdHJva2U9IicrY29sb3IrJyIgZmlsbC1vcGFjaXR5PSIwLjYiIGZpbGw9IndoaXRlIj48dGl0bGU+JytpZDIrJzwvdGl0bGU+PC9lbGxpcHNlPlxuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAiaW50ZXJtZWRpYXRlIiBpbiBpdC5hdHRyaWJbImlkIl06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMrPSAnPGVsbGlwc2UgY3g9Iicrc3RyKHgrdy8yKSsnIiBjeT0iJytzdHIoeStoLzIpKyciIHJ4PSInK3N0cih3LzItMykrJyIgcnk9Iicrc3RyKGgvMi0zKSsnIiBzdHJva2Utd2lkdGg9Iicrc3Ryb2tlKyciIHN0cm9rZT0iZGFya2dyZWVuIiBmaWxsPSJ3aGl0ZSIvPlxuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAiQ2F0Y2giIGluIGl0LmF0dHJpYlsiaWQiXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgIm9uZGl0aW9uIiBpbiBpdC5hdHRyaWJbImlkIl06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMrPSAnPHJlY3QgeD0iJWciIHk9IiVnIiB3aWR0aD0iJWciIGhlaWdodD0iJWciIHN0cm9rZT0iYmxhY2siIGZpbGw9Im5vbmUiIC8+JyUoeCt3LzItNyx5K2gvMi05LHcvMi00LGgvMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcys9ICc8cGF0aCBkPSInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKDUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKz0gJ00lZyAlZyBMJWcgJWcgJyUoeCt3LzItNSx5K2gvMi02KzMqaSx4K3cvMis1LHkraC8yLTYrMyppKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKz0gJzxlbGxpcHNlIGN4PSInK3N0cih4K3cvMikrJyIgY3k9Iicrc3RyKHkraC8yKSsnIiByeD0iJytzdHIody8yLTYpKyciIHJ5PSInK3N0cihoLzItNikrJyIgc3Ryb2tlLXdpZHRoPSInK3N0cm9rZSsnIiBzdHJva2U9ImJsYWNrIiBmaWxsPSJ3aGl0ZSIvPlxuJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKz0gJzxwYXRoIGQ9Ik0lZyAlZyBMJWcgJWcgJWcgJWcgJyUoeCt3LzItNSx5K2gvMi0zLHgrdy8yLHkraC8yLHgrdy8yKzYseStoLzItNikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMTIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIG1hdGggaW1wb3J0IHNpbixjb3MscGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcys9ICJNJWcgJWcgTCVnICVnICIlKHgrdy8yKyh3LzItNikqY29zKGkqMipwaS8xMikseStoLzIrKGgvMi02KSpzaW4oaSoyKnBpLzEyKSx4K3cvMisody8yLTkpKmNvcyhpKjIqcGkvMTIpLHkraC8yKyhoLzItOSkqc2luKGkqMipwaS8xMikpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMrPSAnIiBzdHJva2U9ImJsYWNrIiBzdHJva2Utd2lkdGg9IjEiIGZpbGw9Im5vbmUiLz4nICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICJlcm1pbmF0ZSIgaW4gaXQuYXR0cmliWyJpZCJdOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKz0gJzxlbGxpcHNlIGN4PSInK3N0cih4K3cvMikrJyIgY3k9Iicrc3RyKHkraC8yKSsnIiByeD0iJytzdHIody8yLTYpKyciIHJ5PSInK3N0cihoLzItNikrJyIgc3Ryb2tlLXdpZHRoPSInK3N0cm9rZSsnIiBzdHJva2U9InJlZCIgZmlsbD0icmVkIiBmaWxsLW9wYWNpdHk9IjAuNiIvPlxuJwogICAgICAgICAgICAgICAgICAgICAgICBlbGlmICJHYXRld2F5IiBpbiBpdC5hdHRyaWJbImlkIl06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yID0gIm9yYW5nZSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcys9ICc8cGF0aCBkPSJNJWcgJWcgTCVnICVnIEwlZyAlZyBMJWcgJWcgWiIgc3Ryb2tlPSIlcyIgZmlsbD0id2hpdGUiPjx0aXRsZT4lczwvdGl0bGU+PC9wYXRoPlxuJyUoeCx5K2gvMix4K3cvMix5LHgrdyx5K2gvMix4K3cvMix5K2gsY29sb3IsaWQyKSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgImV4Y2x1c2l2ZSIgaW4gaXQuYXR0cmliWyJpZCJdOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKz0nPHBhdGggZD0iTSVnICVnIEwlZyAlZyBNJWcgJWcgTCVnICVnIiBzdHJva2U9ImJsYWNrIiBzdHJva2Utd2lkdGg9IjMiIC8+XG4nJSh4K3cvMi02LHkraC8yLTYseCt3LzIrNix5K2gvMis2LHgrdy8yKzYseStoLzItNix4K3cvMi02LHkraC8yKzYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgInBhcmFsbGVsIiBpbiBpdC5hdHRyaWJbImlkIl06CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMrPSc8cGF0aCBkPSJNJWcgJWcgTCVnICVnIE0lZyAlZyBMJWcgJWciIHN0cm9rZT0iYmxhY2siIHN0cm9rZS13aWR0aD0iMyIgLz5cbiclKHgrdy8yLTgseStoLzIseCt3LzIrOCx5K2gvMix4K3cvMix5K2gvMi04LHgrdy8yLHkraC8yKzgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgImluY2x1c2l2ZSIgaW4gaXQuYXR0cmliWyJpZCJdOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzKz0nPGNpcmNsZSBjeD0iJWciIGN5PSIlZyIgcj0iNyIgZmlsbD0ibm9uZSIgc3Ryb2tlPSJibGFjayIgc3Ryb2tlLXdpZHRoPSIzIiAvPlxuJyUoeCt3LzIseStoLzIpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMrPSAnPHJlY3Qgcng9IjciIHJ5PSI3IiB4PSInK3N0cih4KSsnIiB5PSInK3N0cih5KSsnIiB3aWR0aD0iJytzdHIodykrJyIgaGVpZ2h0PSInK3N0cihoKSsnIiBzdHJva2U9ImRhcmtibHVlIiBmaWxsPSJ3aGl0ZSI+PHRpdGxlPicraWQyKyc8L3RpdGxlPjwvcmVjdD5cbicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgInNjcmlwdCIgaW4gaXQuYXR0cmliWyJpZCJdOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZSg0KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArPSc8cGF0aCBkPSJNJWcgJWcgTCVnICVnIiBzdHJva2U9ImJsYWNrIiBzdHJva2Utd2lkdGg9IjEiIC8+JyUoeCsxMCswKmkseSsxMCs0KmkseCsyMiswKmkseSsxMCs0KmkpCiAgICAgICAgICAgIGlmIGxlbihwcCk+MDogIyBzMSE9Jyc6ICMgYWRkIHdob2xlIGZsb3cKICAgICAgICAgICAgICAgICAgczE9c3ZnX3JvdW5kZWRQYXRoKHBwLDEyKQogICAgICAgICAgICAgICAgICBzICs9ICc8cGF0aCBtYXJrZXItZW5kPSJ1cmwoI3RyaWFuZ2xlKSIgZD0iJytzMSsnIiBzdHlsZT0iZmlsbDpub25lO3N0cm9rZTpicm93bjtzdHJva2Utd2lkdGg6MSIvPlxuJwogICAgICBzICs9ICI8c2NyaXB0PmZ1bmN0aW9uIG9uX2NsaWNrKCkge1suLi5kb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0MScpXS5mb3JFYWNoKGU9PmUuc3R5bGUuZGlzcGxheT0oZS5zdHlsZS5kaXNwbGF5PT0nbm9uZSc/Jyc6J25vbmUnKSk7fTwvc2NyaXB0PiIKICAgICAgcyA9ICc8c3ZnIG9uY2xpY2s9Im9uX2NsaWNrKCkiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgd2lkdGg9IiVkIiBoZWlnaHQ9IiVkIj5cbiclKFcrNDArNjAsSCszMCkrcwogICAgICByZXR1cm4gcyArICh0b19hbmltKCkgaWYgaXNhbmltIGVsc2UgJycpICsgJzwvc3ZnPlxuJwpkZWYgdG9fYW5pbSgpOgogICAgICAjcmV0dXJuIHMKICAgICAgZ2xvYmFsIG5lCiAgICAgIHMgPSAgJzxkZWZzPjxmaWx0ZXIgeD0iMCIgeT0iMCIgd2lkdGg9IjEiIGhlaWdodD0iMSIgaWQ9ImZpIj5cbicKICAgICAgcyArPSAnPGZlRmxvb2QgZmxvb2QtY29sb3I9IndoaXRlIi8+XG4nCiAgICAgIHMgKz0gJzxmZUNvbXBvc2l0ZSBpbj0iU291cmNlR3JhcGhpYyIgb3BlcmF0b3I9ImF0b3AiLz48L2ZpbHRlcj48L2RlZnM+XG4nCiAgICAgIGZvciBlIGluIG5lLmVlOgogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGUsRW5kKToKICAgICAgICAgICAgICAgICAgZm9yIGMgaW4gZS5xdWV1ZS5vYmplY3RzOgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4obmUuZWUpKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCwgeSwgYSA9IG5lLmVlW2ldLngsIG5lLmVlW2ldLnksIGMuYXR0ciAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArPSc8dGV4dCBjbGFzcz0idDEiIGZpbHRlcj0idXJsKCNmaSkiIHN0eWxlPSJmb250LXNpemU6c21hbGw7ZmlsbDpyZWQiIHg9Iicrc3RyKHgtMjApKyciIHk9Iicrc3RyKHkrMTMpKyciIHZpc2liaWxpdHk9ImhpZGRlbiI+JytzdHIoYy5uYW1lKSsnXG4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQ9Il9fdCIrc3RyKGkrMSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdCsiYSIgaW4gYToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdDAgPSBhW3QrImEiXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzICs9ICc8YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPSJ2aXNpYmlsaXR5IiBmcm9tPSJoaWRkZW4iIHRvPSJ2aXNpYmxlIiBiZWdpbj0iJytzdHIodDApKydzIiBkdXI9IjAuMDFzIiBmaWxsPSJmcmVlemUiLz5cbicKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdCsiYiIgaW4gYToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdDEgPSBhW3QrImIiXSAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArPSAnPGFuaW1hdGUgYXR0cmlidXRlTmFtZT0ieCIgdG89Iicrc3RyKHgrMzgpKyciIGJlZ2luPSInK3N0cih0MSkrJ3MiIGR1cj0iMC41cyIgZmlsbD0iZnJlZXplIi8+XG4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHQrImUiIGluIGE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQyID0gYVt0KyJlIl0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArPSAnPGFuaW1hdGUgYXR0cmlidXRlTmFtZT0idmlzaWJpbGl0eSIgZnJvbT0idmlzaWJsZSIgdG89ImhpZGRlbiIgYmVnaW49Iicrc3RyKHQyKSsncyIgZHVyPSIwLjAxcyIgZmlsbD0iZnJlZXplIi8+XG4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgKz0nPC90ZXh0PlxuJwogICAgICByZXR1cm4gcwoKbmU9W10KIyAtLS0tIHNpbXVsYXRpb24gLS0tLS0KZGVmIG1haW5fZnVuKGV4bixuLGFuaW0sY29tbWVudHMsc2NyaXB0cyk6ICMgc3RyaW5nIHJlcHJlc2VudGF0aW9uLCBudW1iZXIgb2Ygc2ltdWxhdGlvbgogICAgICBkYXRhPVtdICAjIGxpc3Qgb2YgZXZlbnRzLCBhcnJheSBvZiByZXN1bHRzCiAgICAgIHMgPSAnJwogICAgICBmb3IgaSBpbiByYW5nZShuKToKICAgICAgICAgICAgZ2xvYmFsIG5lCiAgICAgICAgICAgIG5lID0gRXZlbnROZXR3b3JrKGV4bikKICAgICAgICAgICAgc2ltID0gU2ltdWxhdG9yKCkKICAgICAgICAgICAgZm9yIGUgaW4gbmU6CiAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UoZSxHZW5lcmF0b3IpOiAgIyBhZGQgZ2VuZXJhdGluZyBldmVudHMKICAgICAgICAgICAgICAgICAgICAgICAgc2ltLmFkZChlKSAgCiAgICAgICAgICAgIHNpbS5ydW4oKQogICAgICAgICAgICBkYXRhLmFwcGVuZChbc2ltLnRpbWUsQnBtbkV2ZW50LlNdKSAgICMgc2F2ZSBlbmQgdGltZSBvZiBzaW11bGF0aW9uCiAgICAgICAgICAgIAogICAgICAgICAgICAjaWYgZXhuPT1leDU6CiAgICAgICAgICAgICMgICAgICBkYXRhLmFwcGVuZChCcG1uRXZlbnQuU1siUy5iQSJdKSAjIHNhdmUgZ2xvYmFsIHZhcmlhYmxlIFMuYkEKICAgICAgICAgICAgI2Vsc2U6CiAgICAgICAgICAgICMgICAgICBkYXRhLmFwcGVuZChzaW0udGltZSkgICAjIHNhdmUgZW5kIHRpbWUgb2Ygc2ltdWxhdGlvbgogICAgICAgICAgICBpZiBpPT0wOgogICAgICAgICAgICAgICAgICBzMSA9IHRvX2JwbW4obmUuZWUsbmUucHApCiAgICAgICAgICAgICAgICAgIHMyID0gYnBtbl90b3N2ZyhzMSxhbmltLGNvbW1lbnRzLHNjcmlwdHMpCiAgICAgICAgICAgICAgICAgIHMzID0gdG9fc3ZnKCkKICAgICAgcyArPSAiI25cdHRcdCIrIlx0Ii5qb2luKGRhdGFbMF1bMV0ua2V5cygpKSsiXG4iCiAgICAgIHMgKz0gIlxuIi5qb2luKFsiJWRcdCUuMmZcdCVzIiUoaSsxLGRhdGFbaV1bMF0sIlx0Ii5qb2luKFtzdHIodikgZm9yIHYgaW4gWypkYXRhW2ldWzFdLnZhbHVlcygpXV0pKSBmb3IgaSBpbiByYW5nZShsZW4oZGF0YSkpXSkKICAgICAgI2ZvciBlIGluIG5lOgogICAgICAjICAgICAgaWYgbGVuKGUucXVldWUpPjA6CiAgICAgICMgICAgICAgICAgICBzICs9IHN0cihlLmlkKSArICgiKCVkKToiJWxlbihlLnF1ZXVlKSkgKyBzdHIoZS5xdWV1ZSkrJ1xuJwogICAgICAjcyArPSBzdHIoc3VtKGRhdGEpL2xlbihkYXRhKSkrJ1xuJwogICAgICAjcyArPSBzdHIoQnBtbkV2ZW50LlMpKydcbicKICAgICAgI2ZvciBlIGluIG5lOgogICAgICAjICAgICAgcyArPSBzdHIoZS5pZCkrc3RyKGUuQSkrJyAnCiAgICAgICMgICAgICBpZiBpc2luc3RhbmNlKGUsVGFzayk6CiAgICAgICMgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShsZW4oZS5zZXJ2ZXJzKSk6CiAgICAgICMgICAgICAgICAgICAgICAgICBzICs9IHN0cihlLnNlcnZlcnNbaV0uaWQpKycvJytzdHIoaSsxKStzdHIoZS5zZXJ2ZXJzW2ldLkEpKycgJwogICAgICBzND0nJwogICAgICBpZiBsZW4oZGF0YSk+PTEwMDoKICAgICAgICAgICAgI2lmIGV4bj09ZXg0OgogICAgICAgICAgICAjICAgICAgczQgPSBoaXN0KGRhdGEsNykKICAgICAgICAgICAgI2Vsc2U6CiAgICAgICAgICAgICMgICAgICBzNCA9IGhpc3QoZGF0YSkKICAgICAgICAgICAgcGFzcyAjIHM0ID0gaGlzdChkYXRhKQogICAgICByZXR1cm4gKHMsczEsczIsczMsczQpICMgczIrJzxicj5cbicrKHMzIGlmIG49PTEgZWxzZSAnJykrJzxicj5cbicrJzxwcmU+JytzKyc8L3ByZT4nCgoiIiIKaWYgX19uYW1lX189PSJfX21haW5fXyI6CiAgICAgIGltcG9ydCBzeXMKICAgICAgI2ltcG9ydCBleAogICAgICBleDMwID0gJzEgU3RhcnQoKVxuMiBUYXNrKClcbjMgRW5kKClcbjEtPjI7Mi0+M1xuJwogICAgICBzID0gbGVuKHN5cy5hcmd2KT4xIGFuZCBmcm9tX2ZpbGUoc3lzLmFyZ3ZbMV0pIG9yIGV2YWwoJ2V4JWQnJSgzMCkpCiAgICAgIG4gPSBsZW4oc3lzLmFyZ3YpPjIgYW5kIGludChzeXMuYXJndlsyXSkgb3IgMTAwCiAgICAgIGFuaW0gPSAxCiAgICAgIGNvbW1lbnRzID0gMQogICAgICBzY3JpcHRzID0gMQogICAgICBvdXRwdXQgPSBtYWluX2Z1bihzLG4sYW5pbSxjb21tZW50cyxzY3JpcHRzKQogICAgICBwcmludChvdXRwdXRbMl0pICAgICAgCiAgICAgIHByaW50KG91dHB1dFszXSkKICAgICAgcHJpbnQoJzxwcmU+JyxvdXRwdXRbMF0sJzwvcHJlPicpCiIiIgpzID0gaW5wdXRbMF0KbiA9IGludChpbnB1dFsxXSkKYW5pbSA9IGludChpbnB1dFsyXSkKY29tbWVudHMgPSBpbnQoaW5wdXRbM10pCnNjcmlwdHMgPSBpbnQoaW5wdXRbNF0pCm91dHB1dCA9IG1haW5fZnVuKHMsIG4sIGFuaW0sIGNvbW1lbnRzLCBzY3JpcHRzKQpzID0gJycKI3MgKz0gJzxkaXYgaWQ9ImRpdjEiIGhpZGRlbj4nK291dHB1dFsxXSsnPC9kaXY+PGJyPlxuJwpzICs9ICc8ZGl2IGlkPSJkaXYyIiB0YWJpbmRleD0iLTEiPicrb3V0cHV0WzJdKyc8L2Rpdj48YnI+XG4nCiNzICs9JzxpbnB1dCB0eXBlPWJ1dHRvbiB2YWx1ZT0iU2F2ZSBicG1uIHRvIHhtbCBmaWxlIiBvbmNsaWNrPSJ3cml0ZUZpbGUxKCk7Ij48L2lucHV0PlxuJwpzICs9JzxpbnB1dCB0eXBlPWJ1dHRvbiB2YWx1ZT0iU2F2ZSBicG1uIHRvIHN2ZyBmaWxlIiBvbmNsaWNrPSJ3cml0ZUZpbGUyKCk7Ij48L2lucHV0PlxuJwpzICs9JzxpbnB1dCB0eXBlPWJ1dHRvbiB2YWx1ZT0iU2F2ZSBicG1uIHRvIHhtbCBmaWxlIiBvbmNsaWNrPSJ3cml0ZUZpbGU1KCk7Ij48L2lucHV0Pjxicj48YnI+XG4nCmlmIG49PTE6CiAgICAgIHMgKz0gJzxkaXYgaWQ9ImRpdjMiPicrb3V0cHV0WzNdICsnPC9kaXY+PGJyPlxuJwogICAgICBzICs9JzxpbnB1dCB0eXBlPWJ1dHRvbiB2YWx1ZT0iU2F2ZSB0aW1lbGluZSB0byBzdmcgZmlsZSIgb25jbGljaz0id3JpdGVGaWxlMygpOyI+PC9pbnB1dD48YnI+PGJyPlxuJwpzICs9Jzx0ZXh0YXJlYSBpZD0idGE0IiByb3dzPSIxMCIgY29scz0iODAiPicrb3V0cHV0WzBdKyc8L3RleHRhcmVhPjxicj5cbicgIysnPGltZyBzcmM9Iicrb3V0cHV0WzNdKyciPicKcyArPSc8aW5wdXQgdHlwZT1idXR0b24gdmFsdWU9IlNhdmUgcmVzdWx0cyB0byB0eHQgZmlsZSIgb25jbGljaz0id3JpdGVGaWxlNCgpOyI+PC9pbnB1dD48YnI+PGJyPlxuJwpzICs9Jzx0ZXh0YXJlYSBoaWRkZW4gaWQ9InRhNSIgcm93cz0iMTAiIGNvbHM9IjgwIj4nK291dHB1dFsxXSsnPC90ZXh0YXJlYT48YnI+XG4nICMrJzxpbWcgc3JjPSInK291dHB1dFszXSsnIj4nCnMKCgo=";